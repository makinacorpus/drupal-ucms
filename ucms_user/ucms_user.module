<?php
/**
 * @file
 * ÂµCMS user management module.
 */

use Drupal\Core\Session\AccountInterface;
use MakinaCorpus\Ucms\User\UserAccess;
use MakinaCorpus\Ucms\User\Controller\AccountController;
use MakinaCorpus\Ucms\User\EventDispatcher\UserAccessEvent;


define('UCMS_USER_PWD_MIN_LENGTH', 8);


/**
 * Implements hook_menu().
 */
function ucms_user_menu() {
  $items = [];

  $items['admin/dashboard/user'] = [
    'title'             => 'Users',
    'page callback'     => 'ucms_user_dashboard_user_list',
    'access callback'   => 'ucms_user_access_admin',
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_user.dashboard.inc',
  ];

  $items['admin/dashboard/user/add'] = [
    'title'             => 'Create user',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserEdit'],
    'access callback'   => 'ucms_user_access_admin',
    'type'              => MENU_NORMAL_ITEM,
  ];

  $items['admin/dashboard/user/%user'] = [
    'title callback'    => 'ucms_user_menu_item_title',
    'title arguments'   => [3],
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [AccountController::class . '::viewInfoAction', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'view'],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_user.dashboard.inc',
  ];

  $items['admin/dashboard/user/my-account'] = [
    'title'            => 'Edit my account information',
    'page callback'    => 'sf_dic_page_form',
    'page arguments'   => ['MakinaCorpus\Ucms\User\Form\MyAccountEdit'],
    'access callback'  => true,
    'type'             => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/my-password'] = [
    'title'            => 'Change my password',
    'page callback'    => 'sf_dic_page_form',
    'page arguments'   => ['MakinaCorpus\Ucms\User\Form\MyAccountChangePassword'],
    'access callback'  => true,
    'type'             => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/%user/view'] = [
    'title'             => 'View',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -20
  ];

  $items['admin/dashboard/user/%user/edit'] = [
    'title'             => 'Edit',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserEdit', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'update'],
    'type'              => MENU_LOCAL_TASK,
    'weight'            => -10
  ];

  $items['admin/dashboard/user/%user/reset-password'] = [
    'title'             => 'Reset password',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserResetPassword', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'update'],
    'type'              => MENU_LOCAL_TASK,
  ];

  $items['admin/dashboard/user/%user/delete'] = [
    'title'             => 'Delete',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserDelete', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'update'],
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 100,
  ];

  $items['admin/dashboard/user/%user/enable'] = [
    'title'             => 'Enable the user',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserEnable', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'update'],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/%user/disable'] = [
    'title'             => 'Disable the user',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserDisable', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'update'],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/%user/change-email'] = [
    'title'             => 'Change email',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserChangeEmail', 3],
    'access callback'   => 'ucms_user_access',
    'access arguments'  => [3, 'update'],
    'type'              => MENU_CALLBACK,
  ];

  $items['set-password/%'] = [
    'title'             => 'Set password',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserSetPassword', 1],
    'access callback'   => ['user_is_anonymous'],
    'type'              => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * @todo reimplement me using ACL in master
 */
function ucms_user_access($target, $permission) {
  if (!$target instanceof AccountInterface) {
    return false;
  }
  if (!ucms_user_access_admin()) {
    return false;
  }
  $account = \Drupal::currentUser();

  // @todo implement me properly, this is very ugly
  // @todo raise an event for group module to intercept
  switch ($permission) {

    case 'delete':
      if ($target->hasPermission(UserAccess::PERM_USER_GOD) && !$account->hasPermission(UserAccess::PERM_USER_GOD)) {
        return false;
      }
      break;

    case 'update':
      if ($target->hasPermission(UserAccess::PERM_USER_GOD) && !$account->hasPermission(UserAccess::PERM_USER_GOD)) {
        return false;
      }
      break;
  }

  /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher */
  $dispatcher = \Drupal::service('event_dispatcher');
  $event = new UserAccessEvent($target, $account, $permission);
  $dispatcher->dispatch(UserAccessEvent::EVENT_NAME, $event);

  return $event->isGranted();
}

/**
 * @todo reimplement me using ACL in master
 */
function ucms_user_access_admin() {
  return user_access(UserAccess::PERM_MANAGE_ALL) || user_access(UserAccess::PERM_USER_GOD);
}

/**
 * Implements hook_menu_alter().
 */
function ucms_user_menu_alter(&$items) {
  // Changes the new password request form
  $items['user/password']['page callback']  = 'sf_dic_page_form';
  $items['user/password']['page arguments'] = ['MakinaCorpus\Ucms\User\Form\UserRequestNewPassword'];
}


/**
 * Title callback for menu items.
 */
function ucms_user_menu_item_title($user) {
  return t("User @name", ['@name' => $user->name]);
}


/**
 * Implements hook_permission().
 */
function ucms_user_permission() {
  return [
    UserAccess::PERM_MANAGE_ALL => [
      'title' => t("Manage all users in allowed contexts such as groups"),
    ],
    UserAccess::PERM_USER_GOD => [
      'title' => t("Manage all users, no matter the context"),
    ],
  ];
}


/**
 * Implements hook_theme().
 */
function ucms_user_theme($existing, $type, $theme, $path) {
  return [
    'ucms_user_account_portlet' => array(
      'render element' => 'element',
    ),
  ];
}

/**
 * Allows to override account portlet from theme.
 */
function theme_ucms_user_account_portlet($variables) {
  return $variables['element']['#children'];
}

/**
 * Implements hook_mail().
 */
function ucms_user_mail($key, &$message, $params) {
  $langcode = isset($message['language']) ? $message['language']->language : null;

  switch ($key) {
    case 'new-account-disabled':
      $message['subject'] = variable_get(
          'ucms_user_mail_new_account_disabled_subject_' . $langcode,
          t("You have been registered at [site:name]", [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_new_account_disabled_body_' . $langcode,
          t("[user:name],

An account has been created for you at [site:name].

You can activate it by clicking this link or copying and pasting it to your browser:

[user:password-url]

This link can only be used once and will lead you to a page where you can set your password.

After setting your password, you will be able to log in at [site:login-url] in the future using your username: [user:name].

--  [site:name] team", [], ['langcode' => $langcode]));
      break;

    case 'new-account-enabled':
      $message['subject'] = variable_get(
          'ucms_user_mail_new_account_enabled_subject_' . $langcode,
          t("You have been registered at [site:name]", [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_new_account_enabled_body_' . $langcode,
          t("[user:name],

An account has been created for you at [site:name].

This account is already active, you will be able to log in at [site:login-url] using the password that we will provide you soon.

--  [site:name] team", [], ['langcode' => $langcode]));
      break;

    case 'new-password-request':
      $message['subject'] = variable_get(
          'ucms_user_mail_new_password_request_subject_' . $langcode,
          t('Your new password request at [site:name]', [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_new_password_request_body_' . $langcode,
          t("[user:name],

A request to reset the password for your account has been made at [site:name].

You may now set your new password by clicking this link or copying and pasting it to your browser:

[user:password-url]

This link can only be used once and will lead you to a page where you can set your password.
It expires after [user:password-url-lifespan] and nothing will happen if it's not used.

--  [site:name] team", [], ['langcode' => $langcode]));
      break;

    case 'password-reset':
      $message['subject'] = variable_get(
          'ucms_user_mail_password_reset_subject_' . $langcode,
          t('Reset of your password at [site:name]', [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_password_reset_body_' . $langcode,
          t("[user:name],

Your password has been resetted by an administrator at [site:name].

Please set your new password by clicking this link or copying and pasting it to your browser:

[user:password-url]

This link can only be used once and will lead you to a page where you can set your password.
It expires after [user:password-url-lifespan] and nothing will happen if it's not used.

--  [site:name] team", [], ['langcode' => $langcode]));
      break;
  }

  $variables = [
    'user' => $params['user'],
    'token' => $params['token'],
  ];

  $options = [
    'language' => $message['language'],
    'callback' => 'ucms_user_replace_tokens',
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    'sanitize' => false,
    'clear' => true,
  ];

  $message['subject'] = token_replace($message['subject'], $variables, $options);
  $message['body'][0] = token_replace($message['body'][0], $variables, $options);
}


/**
 * Callback to add exceptional tokens.
 */
function ucms_user_replace_tokens(&$replacements, $data, $options) {
  if (isset($data['token'])) {
    $replacements['[user:password-url]'] = url('set-password/' . $data['token']->token, ['absolute' => true]);
  }

  $lifespan = variable_get('user_password_reset_timeout', 86400);
  $replacements['[user:password-url-lifespan]'] = format_interval($lifespan, -1, $options['language']->language);
}


/**
 * Just for translation.
 */
function ucms_user_translations() {
  format_plural(1, "@count year", "@count years");
  format_plural(1, "@count month", "@count monthes");
  format_plural(1, "@count day", "@count days");
  format_plural(1, "@count h", "@count h");
  format_plural(1, "@count min", "@count min");
  format_plural(1, "@count s", "@count s");
}
