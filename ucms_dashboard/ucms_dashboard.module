<?php
/**
 * UCMS - Dashboard and fioritures.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_page_attachments().
 */
function ucms_dashboard_page_attachments(array &$attachments) {
  // Attach seven theme fixes if enabled
  $themeManager = \Drupal::theme();
  if ('seven' === $themeManager->getActiveTheme()->getName()) {
    $attachments['#attached']['library'][] = 'ucms_dashboard/ucms_dashboard.seven_fixes';
  }
}

/**
 * Implements hook_entity_operation().
 */
function ucms_dashboard_entity_operation(EntityInterface $entity) {
  $ret = [];

  /** @var \MakinaCorpus\Ucms\Dashboard\Action\ActionRegistry $actionRegistry */
  $actionRegistry = \Drupal::service('ucms_dashboard.action_provider_registry');

  if ($actions = $actionRegistry->getActions($entity)) {
    /** @var \MakinaCorpus\Ucms\Dashboard\Action\Action $action */
    foreach ($actions as $action) {
      $ret[$action->getDrupalId()] = [
        'title' => $action->getTitle(),
        'url' => $action->getDrupalUrl(),
        'weight' => (0 - $action->getPriority()),
      ];
    }
  }

  return $ret;
}

/**
 * Implements hook_admin_custom_theme().
 *
function ucms_dashboard_custom_theme() {
  if (module_exists('ucms_site') && ucms_site_is_master()) {
    return variable_get('admin_theme', variable_get('theme_default', 'bartik'));
  }
}
 */

/**
 * Implements hook_menu().
 *
function ucms_dashboard_menu() {

  $items = [];

  $items['home'] = [
    'page callback'     => 'ucms_dashboard_home',
    'access callback'   => true,
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard'] = [
    'title'             => "Dashboard",
    'page callback'     => 'ucms_dashboard_page',
    'access arguments'  => ['access administration pages'],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_dashboard.pages.inc',
  ];

  return $items;
}
 */

/**
 * Implements hook_menu_breadcrumb_alter().
 *
function ucms_dashboard_menu_breadcrumb_alter(&$active_trail, $item) {
  if (path_is_admin(current_path())) {

    // Remove the useless 'Home' link. Using array_splice() will reset the
    // numerical indexes within the array allowing the rest of the function
    // to work properly.
    array_splice($active_trail, 0, 1);

    // Remove any item that would be just 'admin', this specific admin page
    // is to be hidden within our custom admin, it does not make sense to
    // keep it.
    foreach ($active_trail as $index => $item) {
      if ('admin' === $item['href']) {
        array_splice($active_trail, $index, 1);
      }
    }

    // Ensure the first item is the dashboard item, if not inject it,
    // dashboard is the main entry point for everything. Please note that if
    // the current path is the dashboard, there is not other alteration to be
    // done so we'll return early.
    if ('admin/dashboard' === current_path()) {
      return;
    }

    if ('admin/dashboard' !== $active_trail[0]['href']) {
      array_unshift($active_trail, [
        'title' => t("Dashboard"),
        'href'  => 'admin/dahsboard',
        'localized_options' => [],
      ]);
    }

    $manager = ucms_site_manager();
    if ($manager->hasContext()) {
      array_splice($active_trail, 1, 0, [
        [
          'title' => check_plain($manager->getContext()->getAdminTitle()),
          'href'  => '<front>',
          'localized_options' => [],
        ]
      ]);
    }
  }
}
 */

/**
 * Implements hook_menu_alter().
 *
function ucms_dashboard_menu_alter(&$items) {

  // Remove all the unnecessary pages using the 'access administration pages'
  // or whatever else permission the users may have.
  foreach ([
    'admin/compact',
    'admin/config',
    'admin/config/content',
    'admin/config/development',
    'admin/config/media',
    'admin/config/regional',
    'admin/config/search',
    'admin/config/services',
    'admin/config/system',
    'admin/config/user-interface',
    'admin/config/workflow',
    'admin/index',
    'admin/reports/status/rebuild',
    'admin/structure',
  ] as $path) {
    $items[$path]['access arguments'] = ['non existing permission'];
  }

  // Single override where we change the 'admin' home page.
  $items['admin'] = [
    'title'             => "Administration",
    'page callback'     => 'ucms_dashboard_admin_redirect',
    'access arguments'  => ['access administration pages'],
    'type'              => MENU_CALLBACK,
    // Required to avoid file_scan_directory() calls when rebuilding menu.
    'module'            => 'ucms_dashboard',
  ];
}
 */

/**
 * Menu callback.
 *
function ucms_dashboard_admin_redirect() {
  drupal_goto('admin/dashboard');
}
 */

/**
 * Admin home.
 *
function ucms_dashboard_home() {
  if (drupal_is_cli()) {
    return; // Make drush happy.
  }
  if (ucms_site_manager()->hasContext()) {
    return; // Let sites handle their own frontpage.
  }
  if (!user_is_logged_in()) {
    drupal_goto('user/login');
  }
  drupal_goto('admin/dashboard');
}
 */

/**
 * Implements hook_user_login().
 *
function ucms_dashboard_user_login(&$edit, $account) {
  // When a user logs in, he must be redirected to main dashboard.
  if (drupal_is_cli()) {
    return; // Make drush happy.
  }
  if (ucms_site_manager()->hasContext()) {
    return; // Let sites handle their own frontpage.
  }
  $GLOBALS['ucms_dashboard_login_redirect'] = true;
}
 */

/**
 * Implements hook_drupal_goto_alter().
 *
function ucms_dashboard_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // This is the most proper way to provide a user login redirect.
  if (!empty($GLOBALS['ucms_dashboard_login_redirect'])) {
    if (isset($_GET['destination'])) {
      return; // Do not alter proper redirect.
    }
    $path = 'admin/dashboard';
  }
}
 */

/**
 * Implements hook_page_build().
 *
function ucms_dashboard_page_build(&$page) {

  if (user_is_logged_in() || path_is_admin(current_path())) {
    $links = menu_navigation_links('main-menu');
    foreach ($links as $i => $link) {
      if ($link['href'] === 'user/logout' && user_access('access administration pages')) {
        $links[$i]['href'] = ucms_site_master_absolute_url() . '/user/logout';
        $links[$i]['absolute'] = true;
      }
    }

    $page['page_top']['ucms_dashboard_top'] = [
      '#theme' => 'ucms_dashboard_top',
      '#links' => [
        '#theme' => 'links__main_menu',
        '#links' => $links,
      ],
    ];
  }
}
 */

/**
 * Implements template_preprocess_HOOK().
 *
function template_preprocess_ucms_dashboard_page_list(&$variables) {
  /* @var $display \MakinaCorpus\Ucms\Dashboard\Page\DisplayInterface * /
  $display = $variables['display'];
  $variables['displayView']   = $display->render($variables['items']);
  $variables['displayLinks']  = $display->renderLinks(current_path());
}
 */

/**
 * Render item actions.
 *
 * @param array $variables
 *
function template_preprocess_ucms_dashboard_actions(&$variables) {
  // Clean title that may be === 0
  if (empty($variables['title'])) {
    $variables['title'] = '';
  }
  if (empty($variables['icon'])) {
    $variables['icon'] = '';
  }
  if (!isset($variables['show_title'])) {
    $variables['show_title'] = empty($variables['icon']);
  }

  foreach ($variables['actions'] as $key => $action) {
    /* @var $action \MakinaCorpus\Ucms\Dashboard\Action\Action * /
    // Remove actions for which the path is the same.
    if (current_path() === $action->getURI()) {
      continue;
    }
    if ($action->isPrimary()) {
      $target = 'primary';
    } else {
      $target = 'secondary';
    }

    $item = [];
    $item['separator'] = false;
    $item['options']  = $action->getLinkOptions();
    $item['options'] += ['attributes' => []];
    if (isset($item['options']['attributes']['class'])) {
      $item['options']['attributes']['class'] = implode(' ', $item['options']['attributes']['class']);
    } else {
      $item['options']['attributes']['class'] = '';
    }
    if ('primary' === $target) {
      $item['options']['attributes']['class'] .= ' btn btn-default';
    }
    $item['title']    = $action->getTitle();
    $item['href']     = $action->getURI();
    $item['priority'] = $action->getPriority();
    $item['icon']     = $action->getIcon();

    $variables[$target][$action->getGroup()][$key] = $item;
  }

  foreach (['primary', 'secondary'] as $target) {
    if (isset($variables[$target])) {
      foreach ($variables[$target] as &$group) {
        usort($group, function ($a, $b) {
          return $a['priority'] - $b['priority'];
        });
      }
    }
  }

  if ($variables['mode']) {
    $variables['mode'] === 'icon';
  }
}
 */

/**
 * Implements hook_library().
 *
function ucms_dashboard_library() {
  return [
    'ucms_dashboard' => [
      'title'        => 'UCMS - Dashboard',
      'version'      => '0.1',
      'js'           => [drupal_get_path('module', 'ucms_dashboard') . '/ucms_dashboard.js' => [],],
      'css'          => [drupal_get_path('module', 'ucms_dashboard') . '/ucms_dashboard.css' => ['type'  => 'file', 'media' => 'screen']],
      'dependencies' => [['system', 'jquery.cookie']],
    ],
  ];
}
 */
