<?php
/**
 * @file
 * UCMS - Layout management module.
 *
 * For the sake of consistency, layouts cannot be nodes, otherwise layouts
 * could be embeded into layouts, which would make a serious and non human
 * comprehensible layout-ception. Problem with this model is that we need
 * to implement by ourselves the access API for layouts, but this is the
 * only custom access API that will be implemented at all.
 *
 * @todo
 *   - better AJAX/REST requests handling
 *   - more detailed data structure (options, status)
 *   - alteration for access checks
 *   - non AJAX edit forms for accessibility
 *   - unit testing (sorry should have done that earlier).
 */

use MakinaCorpus\Ucms\Layout\ContextManager;
use MakinaCorpus\Ucms\Layout\Controller\LayoutAjaxController;
use MakinaCorpus\Ucms\Layout\DrupalPageInjector;
use MakinaCorpus\Ucms\Layout\Layout;

/**
 * Implements hook_menu().
 */
function ucms_layout_menu() {
  $items = [];

  // Structure related configuration for administrator.
  $items['admin/structure/layout'] = [
    'title'             => "Layout management",
    'description'       => "Manage usable regions layouts and site wide configuration.",
    'page callback'     => 'ucms_layout_admin_structure',
    'access arguments'  => ['administer content types'],
    'file'              => 'ucms_layout.admin.inc',
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/structure/layout/%ucms_layout_theme'] = [
    'title callback'    => 'ucms_layout_theme_title',
    'title arguments'   => [3],
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Layout\Admin\ThemeRegionsForm', 3],
    'access arguments'  => ['administer content types'],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // AJAX endpoints.
  $items['ajax/ucms/layout/%ucms_layout_temporary/add'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [LayoutAjaxController::class . '::addItem', 3],
    'access callback'   => true,
  ];
  $items['ajax/ucms/layout/%ucms_layout_temporary/remove'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [LayoutAjaxController::class . '::removeItem', 3],
    'access callback'   => true,
  ];
  $items['ajax/ucms/layout/%ucms_layout_temporary/move'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [LayoutAjaxController::class . '::moveItem', 3],
    'access callback'   => true,
  ];

  return $items;
}

/**
 * Menu helper: ensures a theme exist
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string
 *   Theme name if exists and enabled, false otherwise.
 */
function ucms_layout_theme_load($theme) {
  $themes = system_list('theme');

  return (isset($themes[$theme]) && $themes[$theme]->status) ? $theme : false;
}

/**
 * Menu helper.
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string
 *   The theme edit page title.
 */
function ucms_layout_theme_title($theme) {
  $themes = system_list('theme');

  if (isset($themes[$theme])) {
    return t("Edit @theme theme regions", ['@theme' => $themes[$theme]->info['name']]);
  }

  return t("Edit theme regions");
}

/**
 * Get the layout context manager.
 *
 * @return ContextManager
 */
function ucms_layout_context_manager() {
  return \Drupal::service('ucms_layout.context_manager');
}

/**
 * Menu helper: load layout instance in potential temporary context.
 */
function ucms_layout_temporary_load($id) {
  $contextManager = ucms_layout_context_manager();

  if ($contextManager->getPageContext()->isTemporary()) {
    $layout = $contextManager->getPageContext()->getStorage()->load($id);
    if ($layout) {
      $contextManager->getPageContext()->setCurrentLayout($layout);
      return $layout;
    }
  }
  elseif ($contextManager->getSiteContext()->isTemporary()) {
    $layout = $contextManager->getSiteContext()->getStorage()->load($id);
    if ($layout) {
      $contextManager->getSiteContext()->setCurrentLayout($layout);
      return $layout;
    }
  }

  return false;
}

/**
 * Implements hook_theme().
 */
function ucms_layout_theme() {
  return [
    'ucms_layout_item' => [
      'variables' => ['nid' => null, 'node' => null, 'view_mode' => 'teaser', 'region' => ''],
      'template'  => 'ucms-layout-item',
    ],
    'ucms_layout_region' => [
      'variables' => ['items' => [], 'name' => 'content'],
      'template'  => 'ucms-layout-region',
    ],
  ];
}

/**
 * Implements hook_page_build().
 */
function ucms_layout_page_build(&$page) {
  $site = ucms_site_manager()->getContext();

  if ($site) {
    (new DrupalPageInjector(ucms_layout_context_manager(), \Drupal::service('entity.manager')))->inject(
      $page,
      $site->getTheme()
    );
  }
}

/**
 * Implements hook_preprocess_region().
 */
function ucms_layout_preprocess_region(&$vars) {
  $manager = ucms_layout_context_manager();

  if ($manager->isRegionInEditMode($vars['region'])) {
    $vars['attributes_array']['data-region'] = $vars['region'];
    $vars['attributes_array']['data-can-receive'] = 1;
  }

  // Lookup for all blocks, if these are only ucms empty block, add class
  if (!element_children($vars['elements'])) {
    $vars['classes_array'][] = 'ucms-layout-empty-region';
  }
}

