<?php
/**
 * @file
 * Install and field stuff, mostly...
 */

/**
 * Implements hook_schema().
 */
function ucms_seo_schema() {
  $schema = [];

  // Same statement as upper, any performance critical meta information must
  // live in a database table we keep the ownership on, any field API usage
  // here would forces us to proceed to heavy recursive processing over
  // nodes, while a decent SGBD can do proper aggregates on any queries.
  $schema['ucms_seo_node'] = [
    'description' => 'Node performance critical SEO information',
    'fields' => [
      'nid' => [
        'description' => "Node identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'alias_segment' => [
        'description' => "Node URL segment for building menu aliases",
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => false,
        'default'     => null,
      ],
      'meta_title' => array(
        'description' => "Page meta title page",
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => false,
        'default'     => null,
      ),
      'meta_description' => array(
        'description' => "Page meta description",
        'type'        => 'text',
        'not null'    => false,
        'default'     => null,
      ),
    ],
    'foreign keys' => [
      'nid' => [
        'table'   => 'node',
        'columns' => ['nid' => 'nid'],
        'delete'  => 'cascade',
      ],
    ],
    'primary key' => ['nid'],
  ];

  $schema['ucms_seo_route'] = [
    'description' => 'Stores node routes outside of Drupal alias manager',
    'fields' => [
      'node_id' => [
        'description' => "Node identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'site_id' => [
        'description' => "Site identifier this route belongs to",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'route' => [
        'description' => "Node path alias, computed based upon menus",
        'type'        => 'varchar',
        'length'      => 1024,
        'not null'    => true,
      ],
      'menu_id' => [
        'description' => "Menu identifier if known (helps for invalidation)",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
        'default'     => null,
      ],
      'is_protected' => [
        'description' => "I'm sure they will ask me to be able to bypass alias generation sometime",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
      'is_outdated' => [
        'description' => "Is this path alias outdated, will be recomputed on access",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
    ],
    'foreign keys' => [
      'node_id'     => [
        'table'   => 'node',
        'columns' => ['node_id' => 'nid'],
        'delete'  => 'cascade',
      ],
      'site_id' => [
        'table'   => 'ucms_site',
        'columns' => ['site_id' => 'id'],
        'delete'  => 'cascade',
      ],
      'menu_id' => [
        'table'   => 'umenu',
        'columns' => ['menu_id' => 'id'],
        'delete'  => 'set null',
      ],
    ],
    'unique keys' => [
      'seo_site_route' => ['site_id', 'route'],
    ],
    'primary key' => ['node_id', 'site_id'],
  ];

  if (db_driver() == 'mysql') {
    // MySQL will fail on unique key with VARCHAR > 255.
    unset($schema['ucms_seo_route']['unique keys']);
  }

  $schema['ucms_seo_redirect'] = [
    'description'  => 'Stores old node paths for redirect',
    'fields'       => [
      'id'      => [
        'description' => "Redirect identifier",
        'type'        => 'serial',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'nid'     => [
        'description' => "Node identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'site_id' => [
        'description' => "Site identifier this alias belongs to",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'path'    => [
        'description' => "Old path to redirect from",
        'type'        => 'varchar',
        'length'      => 1024,
        'not null'    => true,
        'default'     => '',
      ],
      'expires' => [
        'description' => "When this redirect expires (is fully dropped; if null, no drop)",
        'mysql_type'  => 'datetime',
        'pgsql_type'  => 'timestamp',
        'type'        => 'varchar',
        'length'      => 16,
        'default'     => null,
      ],
    ],
    'foreign keys' => [
      'nid'     => [
        'table'   => 'node',
        'columns' => ['nid' => 'nid'],
        'delete'  => 'cascade',
      ],
      'site_id' => [
        'table'   => 'ucms_site',
        'columns' => ['site_id' => 'id'],
        'delete'  => 'cascade',
      ],
    ],
    'indexes'      => [
      'site' => ['site_id'],
    ],
    'primary key' => ['id'],
  ];

  return $schema;
}

/**
 * Adds database constraints.
 */
function ucms_seo_install_schema_fix() {
  drupal_get_complete_schema(true);
  if (module_exists('ucms_layout')) {
    db_constraint_add_all('ucms_layout', drupal_get_schema('ucms_layout'));
    db_constraint_add_all('ucms_layout_data', drupal_get_schema('ucms_layout_data'));
  }
}

/**
 * Removes database constraints.
 */
function ucms_seo_uninstall_schema_fix() {
  drupal_get_complete_schema(true);
  db_constraint_add_all('ucms_layout', drupal_get_schema('ucms_layout'));
  db_constraint_add_all('ucms_layout_data', drupal_get_schema('ucms_layout_data'));
  variable_del('ucms_seo_node_type_blacklist');
  variable_del('ucms_seo_share_canonical');
}

/**
 * Set weight so that ucms_seo pass after ucms_site in hook_node_save().
 */
function ucms_seo_install_set_weight() {

  $weight = db_select('system', 's')
    ->fields('s', ['weight'])
    ->condition('name', 'ucms_site', '=')
    ->execute()
    ->fetchField()
  ;

  db_update('system')
    ->fields(['weight' => $weight + 1])
    ->condition('name', 'ucms_seo', '=')
    ->execute()
  ;
}

/**
 * Implements hook_install().
 */
function ucms_seo_install() {
  db_constraint_fix('ucms_seo');
  ucms_seo_install_set_weight();
}

/**
 * Implements hook_uninstall().
 */
function ucms_seo_uninstall() {
  db_constraint_unfix('ucms_seo');
}

/**
 * Adds missing database columns.
 */
function ucms_seo_update_7005() {
  if (!db_field_exists('ucms_seo_node', 'meta_title')) {
    db_add_field('ucms_seo_node', 'meta_title', [
      'description' => "Page meta title page",
      'type'        => 'varchar',
      'length'      => 255,
      'not null'    => false,
      'default'     => null,
    ]);
  }
  if (!db_field_exists('ucms_seo_node', 'meta_description')) {
    db_add_field('ucms_seo_node', 'meta_description', [
      'description' => "Page meta description",
      'type'        => 'text',
      'not null'    => false,
      'default'     => null,
    ]);
  }
}

/**
 * Fix module weight.
 */
function ucms_seo_update_7011() {
  ucms_seo_install_set_weight();
}

/**
 * Removes some tables.
 */
function ucms_seo_update_7014() {
  if (db_table_exists('ucms_seo_deadlinks_tracking')) {
    db_drop_table('ucms_seo_deadlinks_tracking');
  }
}

/**
 * Install the ucms_seo_redirect table.
 */
function ucms_seo_update_7018() {
  $table = 'ucms_seo_redirect';
  if (!db_table_exists($table)) {
    $schema = drupal_get_schema_unprocessed('ucms_seo', $table);
    db_create_table($table, $schema);
  }
}

/**
 * Prefix redirects by a slash if needed.
 */
function ucms_seo_update_7019() {
  db_query("UPDATE {ucms_seo_redirect} SET path = CONCAT('/', path) WHERE LEFT(path, 1) != '/'")->execute();
}

/**
 * New aliases database structure.
 */
function ucms_seo_update_7020() {
  if (!db_table_exists('ucms_seo_route')) {
    db_create_table('ucms_seo_route', drupal_get_schema_unprocessed('ucms_seo', 'ucms_seo_route'));
  }
  if (!db_field_exists('ucms_seo_redirect', 'expires')) {
    db_add_field('ucms_seo_redirect', 'expires', [
      'description' => "When this redirect expires (is fully dropped; if null, no drop)",
      'mysql_type'  => 'datetime',
      'pgsql_type'  => 'timestamp',
      'type'        => 'varchar',
      'length'      => 16,
      'default'     => null,
    ]);
  }
  ucms_seo_install_schema_fix();
}

/**
 * New aliases data migration.
 */
function ucms_seo_update_7021() {

  if (!db_table_exists('ucms_seo_alias')) {
    return;
  }

  db_query("
    INSERT INTO {ucms_seo_route}
        (node_id, site_id, route, is_outdated)
    SELECT
        node_id, site_id, alias, 1
    FROM {ucms_seo_alias}
    WHERE pid IN (
        SELECT MAX(pid)
        FROM ucms_seo_alias
        WHERE
            site_id IS NOT NULL
        GROUP BY
            node_id, site_id
    )
  ");

  db_query("
    UPDATE {ucms_seo_alias}
    SET expires = :date
    WHERE expires IS NULL
  ", [':date' => (new DateTime("now +6 month"))->format('Y-m-d')]);

  db_query("
    INSERT INTO {ucms_seo_redirect}
        (nid, site_id, path, expires)
    SELECT
        node_id, site_id, CONCAT('/', alias), expires
    FROM {ucms_seo_alias}
    WHERE
        site_id IS NOT NULL
  ");

  // We'll see about that later; just keeping it in case
  // db_drop_table('ucms_seo_alias');
}

/**
 * Migrates umenu data from legacy to new schema.
 */
function ucms_seo_update_7022() {
  $driver = \Database::getConnection()->driver();
  switch ($driver) {

    case 'pgsql':
      db_query("
        INSERT INTO {umenu_item}
            (id, menu_id, site_id, node_id, weight, title)
        SELECT
            ml.mlid AS id,
            m.id AS menu_id,
            m.site_id AS site_id,
            SUBSTRING(ml.link_path FROM 6)::integer AS node_id,
            ml.weight AS weight,
            ml.link_title AS title
        FROM {menu_links} ml
        JOIN umenu m
            ON m.name = ml.menu_name
        WHERE
            ml.link_path LIKE 'node/%'
            AND (ml.plid = 0 OR ml.plid IS NULL)
            AND m.name NOT IN (
                'navigation', 'management', 'user-menu', 'main-menu'
            )
      ");

      db_query("
        INSERT INTO {umenu_item}
            (id, menu_id, site_id, node_id, parent_id, weight, title)
        SELECT
            ml.mlid AS id,
            m.id AS menu_id,
            m.site_id AS site_id,
            SUBSTRING(ml.link_path FROM 6)::integer AS node_id,
            ml.plid AS parent_id,
            ml.weight AS weight,
            ml.link_title AS title
        FROM {menu_links} ml
        JOIN umenu m
            ON m.name = ml.menu_name
        WHERE
            ml.link_path LIKE 'node/%'
            AND ml.plid <> 0
            AND ml.plid IS NOT NULL
            AND m.name NOT IN (
                'navigation', 'management', 'user-menu', 'main-menu'
            )
        ");

        // Bit dangerous, so keeping that for later.
        // db_query("DELETE FROM {menu_links} WHERE mlid IN (SELECT id FROM {umenu_item})");
        break;

      case 'mysql':
        db_query("
          INSERT INTO {umenu_item}
              (id, menu_id, site_id, node_id, weight, title)
          SELECT
              ml.mlid AS id,
              m.id AS menu_id,
              m.site_id AS site_id,
              CAST(SUBSTRING(ml.link_path FROM 6) AS UNSIGNED INTEGER) AS node_id,
              ml.weight AS weight,
              ml.link_title AS title
          FROM {menu_links} ml
          JOIN umenu m
              ON m.name = ml.menu_name
          WHERE
              ml.link_path LIKE 'node/%'
              AND (ml.plid = 0 OR ml.plid IS NULL)
              AND m.name NOT IN (
                  'navigation', 'management', 'user-menu', 'main-menu'
              )
        ");

        for ($i = 0; $i < 10; ++$i) {
          db_query("
            INSERT IGNORE INTO {umenu_item}
                (id, menu_id, site_id, node_id, parent_id, weight, title)
            SELECT
                ml.mlid AS id,
                m.id AS menu_id,
                m.site_id AS site_id,
                CAST(SUBSTRING(ml.link_path FROM 6) AS UNSIGNED INTEGER) AS node_id,
                ml.plid AS parent_id,
                ml.weight AS weight,
                ml.link_title AS title
            FROM {menu_links} ml
            JOIN {umenu} m
                ON m.name = ml.menu_name
            WHERE
                ml.link_path LIKE 'node/%'
                AND ml.plid <> 0
                AND ml.plid IS NOT NULL
                AND m.name NOT IN (
                    'navigation', 'management', 'user-menu', 'main-menu'
                )
                AND ml.plid IN (SELECT id FROM {umenu_item})
            ");
        }

        // Bit dangerous, so keeping that for later.
        // db_query("DELETE FROM {menu_links} WHERE mlid IN (SELECT id FROM {umenu_item})");
        break;

    default:
      throw new \Exception(sprintf("this update is unsupported for driver '%s'", $driver));
      break;
  }
}

/**
 * Fixes database redirections.
 */
function ucms_seo_update_7023() {
  foreach (db_query("SELECT id, path FROM {ucms_seo_redirect}") as $row) {
    if ('/' === substr($row->path, -1)) {
      db_query("UPDATE {ucms_seo_redirect} SET path = ? WHERE id = ?", [rtrim($row->path, '/'), $row->id]);
    }
  }
}
