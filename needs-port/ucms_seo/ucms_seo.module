<?php
/**
 * @file
 * Ho, ho, ÂµSEO, Santiano.
 *   - Tribute to Hugues Aufray.
 *
 * @todo
 *   - Widget form
 *       -> also needs a standalone form
 *   - menu tree building
 *       -> in a service
 *   - url_alias table handling (is_canonical)
 *       -> in a service
 *   - hook_page_build() to add canonical and meta information
 *     (also could be on node view when mode full, formatter?)
 *       -> in a service
 *   - global configuration (administer path, canonicals)
 */

use Drupal\node\NodeInterface;
use MakinaCorpus\Ucms\Seo\SeoService;
use MakinaCorpus\Ucms\Site\Site;
use MakinaCorpus\Ucms\Seo\Controller\PrivacyController;

/**
 * Default trim length for alias segments.
 */
const UCMS_SEO_SEGMENT_TRIM_LENGTH = 255;

/**
 * Implements hook_menu().
 */
function ucms_seo_menu() {
  $items = [];

  $items['sitemap'] = [
    'title'             => "Sitemap",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Controller\SitemapController::display', 'html'],
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
  ];
  $items['sitemap.xml'] = array(
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Controller\SitemapController::display', 'xml'],
  ) + $items['sitemap'];

  $items['node/%node/seo-edit'] = [
    'title'             => "Edit SEO parameters",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Form\SeoNodeForm', 1],
    'access callback'   => 'ucms_seo_menu_access_node_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/seo-redirects'] = [
    'title'             => "Node redirects",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Controller\SeoController::nodeRedirectList', 1],
    'access callback'   => 'ucms_seo_menu_access_node_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/seo-add-redirect'] = [
    'title'            => "Add a redirect for this node",
    'page callback'    => 'sf_dic_page_form',
    'page arguments'   => ['MakinaCorpus\Ucms\Seo\Form\RedirectForm', 1],
    'access callback'  => 'ucms_seo_menu_access_node_edit',
    'access arguments' => [1],
    'type'             => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  $items['admin/dashboard/site/%ucms_site/seo-aliases'] = [
    'title'             => "Site path aliases",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Controller\SeoController::siteAliasList', 3],
    'access callback'   => 'ucms_seo_menu_access_site_edit',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/dashboard/site/%ucms_site/seo-redirects'] = [
    'title'             => "Site redirects",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Controller\SeoController::siteRedirectList', 3],
    'access callback'   => 'ucms_seo_menu_access_site_edit',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/dashboard/site/%ucms_site/seo-edit'] = [
    'title'             => "Edit SEO parameters",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Form\SeoSiteForm', 3],
    'access callback'   => 'ucms_seo_menu_access_site_edit',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  $items["node/%node/store-locator"] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Seo\Controller\StoreLocatorController::renderPage', 1, 3, 4, 5],
    'access callback'   => 'ucms_seo_store_locator_access',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  $items["privacy-settings"] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [PrivacyController::class . '::clientSettings'],
    'type'              => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function ucms_seo_admin_paths() {
  return [
    'node/*/seo-edit' => true,
    'node/*/seo-redirects' => true,
  ];
}

/**
 * Implements hook_library().
 */
function ucms_seo_library() {
  return [
    'privacy-settings' => [
      'title'   => 'Privacy settings',
      'version' => '1.0',
      'js'      => [drupal_get_path('module', 'ucms_seo') . '/js/privacy-settings.js' => []],
    ],
  ];
}

/**
 * Menu access helper.
 */
function ucms_seo_store_locator_access($node) {
  return in_array($node->type, variable_get('ucms_seo_store_locator_content_types', []), TRUE);
}

/**
 * Menu access helper.
 */
function ucms_seo_menu_access_site_edit(Site $site) {
  return ucms_seo_service()->userCanEditSiteSeo(\Drupal::currentUser(), $site);
}

/**
 * Menu access helper.
 */
function ucms_seo_menu_access_node_edit($node) {
  if ($node instanceof NodeInterface) {
    return ucms_seo_service()->userCanEditNodeSeo(\Drupal::currentUser(), $node);
  }
  return false;
}

/**
 * Implements hook_permission().
 */
function ucms_seo_permission() {
  return [
    SeoService::PERM_SEO_CONTENT_ALL => [
      'title' => t("Access platform wide SEO data"),
    ],
    SeoService::PERM_SEO_CONTENT_OWN => [
      'title' => t("Manage SEO data for own content"),
    ],
    SeoService::PERM_SEO_GLOBAL => [
      'title' => t("Manage SEO data for all content"),
    ],
  ];
}

/**
 * Implements hook_init().
 */
function ucms_seo_init() {

  if (PHP_SAPI === 'cli') {
    return; // Make drush happy.
  }

  // Globalredirect behavior
  // @todo can do better than that.
  if (ucms_site_manager()->hasContext()) {
    // Check a whole lot of condition to be sure we are only viewing the node
    if (!path_is_admin(current_path()) && ($node = menu_get_object()) && 'node' === arg(0) && !arg(2)) {
      // On front page, we should not have an alias
      if (drupal_is_front_page() && request_path() !== "") {
        drupal_goto('', ['query' => drupal_get_query_parameters()], 301);
      } else if (!drupal_is_front_page()) {
        // Verify that we are on the best alias
        $best_alias = ucms_seo_service()->getNodeLocalCanonical($node);
        if ($best_alias && $best_alias !== request_path()) {
          drupal_goto($best_alias, ['query' => drupal_get_query_parameters()], 301);
        }
      }
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function ucms_seo_url_outbound_alter(&$path, &$options, $original_path) {

  if (empty($options['ucms_site'])) {
    return;
  }

  $matches = [];
  if (preg_match('/^node\/(\d+)$/', $original_path, $matches)) {
    /** @var \MakinaCorpus\Ucms\Seo\Path\AliasCacheLookup $aliasLookup */
    $aliasLookup = \Drupal::service('ucms_seo.alias_cache_lookup');
    if ($alias = $aliasLookup->lookup($matches[1], $options['ucms_site'])) {
      $path = $alias;
    }
  }
}

/**
 * Implements hook_page_build().
 */
function ucms_seo_page_build(&$page) {
  $site = null;

  $page['content']['#attached']['library'][] = ['ucms_seo', 'privacy-settings'];

  $manager = ucms_site_manager();

  // This be better to be listener onResponse but hey, what Drupal can and
  // cannot do is way beyond the human comprehension level...
  if ($manager->hasContext()) {
    $site = $manager->getContext();
    if ($site->hasAttribute('seo.google.site_verification')) {
      drupal_add_html_head([
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'google-site-verification',
          'content' => $site->getAttribute('seo.google.site_verification'),
        ],
      ], 'seo.google.site_verification');
    }
  }

  if ($site && !ucms_site_is_master() && !path_is_admin(current_path())) {
    if ($node = menu_get_object()) {

      $urlGenerator = $manager->getUrlGenerator();

      // Add metadata on node view
      foreach (ucms_seo_service()->getNodeMeta($node) as $name => $content) {
        if (!empty($content)) {
          if ($name == 'title') {
            drupal_set_title($content);
          }
          else {
            drupal_add_html_head([
              '#tag'        => 'meta',
              '#attributes' => ['name' => $name, 'content' => $content],
            ], 'meta-' . $name);
          }
        }
      }

      $canonical = null;

      if (drupal_is_front_page()) {
        // Do not set a canonical for home pages, just the site URL.
        $canonical = $urlGenerator->generateUrl($site, null, ['absolute' => true]);
      } else if ('node' === arg(0) && !arg(2)) {
        // Set the canonical url
        $canonical = ucms_seo_service()->getNodeCanonical($node);
        if (!$canonical) {
          $canonical = $urlGenerator->generateUrl($site, 'node/' . $node->nid, ['absolute' => true]);
        }
      }

      if ($canonical) {
        drupal_add_html_head(['#tag' => 'link', '#attributes' => ['rel' => 'canonical', 'href' => $canonical]], 'canonical');
      }
    }
    // Always add robots directives.
    drupal_add_html_head(['#tag' => 'meta', '#attributes' => ['name' => 'robots', 'content' => 'index,follow,all']], 'robots');
  }
}

/**
 * Implements hook_html_head_alter().
 */
function ucms_seo_html_head_alter(&$elements) {
  unset($elements['system_meta_generator']);
  // Remove the 'node' module generated canonical since we are going to
  // handle it by ourselves.
  foreach ($elements as $key => $item) {
    if ('canonical' !== $key && (isset($item['#attributes']['rel']) && 'canonical' === $item['#attributes']['rel'])) {
      unset($elements[$key]);
    }
  }
}

/**
 * @return \MakinaCorpus\Ucms\Seo\SeoService
 */
function ucms_seo_service() {
  return \Drupal::service('ucms_seo.seo_service');
}

/**
 * Element validate for segment.
 */
function ucms_seo_element_validate_segment($element, &$form_state) {
  $value = trim($element['#value']);
  if (empty($value)) {
    return;
  }
  if (false !== strpos($value, '/')) {
    form_error($element, t("SEO node alias cannot contain the / character"));
  }
  if (!preg_match('/^[a-z0-9_-]+$/', $value)) {
    form_error($element, t("SEO node alias can only contain non capital letters, numbers, _ and - characters"));
  }
  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ucms_seo_form_node_form_alter(&$form, &$form_state) {

  $account = \Drupal::currentUser();
  $service = ucms_seo_service();

  if ($service->isNodeBlacklisted($form['#node'])) {
    return;
  }

  $form['ucms_seo'] = [
    '#type'        => 'fieldset',
    '#title'       => t('SEO'),
    '#access'      => $account->hasPermission(SeoService::PERM_SEO_CONTENT_ALL) || $account->hasPermission(SeoService::PERM_SEO_CONTENT_OWN),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#group'       => 'additional_settings',
    '#weight'      => 100,
  ];

  $form['ucms_seo']['ucms_seo_segment'] = [
    '#type'             => 'textfield',
    '#maxlength'        => variable_get('ucms_seo.segment_max_length', 255),
    '#title'            => t("Node alias"),
    '#description'      => t("This alias must not contain the / character"),
    '#default_value'    => $service->getNodeSegment($form['#node']),
    '#attributes'       => ['placeholder' => 'alias-seo'],
    '#element_validate' => ['ucms_seo_element_validate_segment'],
    '#field_prefix'     => t('some/path/'), // @todo
    '#weight'           => 100,
  ];

  $meta = $service->getNodeMeta($form['#node']);
  $form['ucms_seo']['ucms_seo_title'] = [
    '#title'         => t("Meta title"),
    '#type'          => 'textfield',
    '#attributes'    => ['placeholder' => "Titre pour le SEO"],
    '#default_value' => isset($meta['title']) ? $meta['title'] : '',
    '#description'   => t("This title will be used by search engines to index you content"),
    '#maxlength'     => 68,
    '#weight'        => 110,
  ];
  $form['ucms_seo']['ucms_seo_description'] = [
    '#title'         => t("Meta description"),
    '#type'          => 'textarea',
    '#attributes'    => ['placeholder' => "Description pour le seo"],
    '#default_value' => isset($meta['description']) ? $meta['description'] : '',
    '#description'   => t("This text is what will appear as your page summary when searching in most search engines"),
    '#maxlength'     => 156,
    '#weight'        => 120,
  ];
}

/**
 * Implements hook_theme().
 */
function ucms_seo_theme() {
  return [
    'ucms_seo_sitemap' => [
      'variables' => ['menus' => array()],
      'template'  => 'views/ucms-seo-sitemap',
    ],
    'ucms_seo_store_locator_map' => [
      'variables' => [
        'items' => [],
        'nodes' => [],
        'type' => NULL,
        'sub_area' => NULL,
        'locality' => NULL,
      ],
      'template' => 'views/ucms-seo-store-locator-map',
    ],
  ];
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function ucms_seo_page_delivery_callback_alter(&$callback) {
  // Wrap the drupal_deliver_html_page() function to handle our own behavior.
  if ($callback === 'drupal_deliver_html_page' || $callback === 'sf_dic_page_delivery_html') {
    $callback = 'ucms_seo_drupal_deliver_html_page';
  }
}

/**
 * Redirect to another node in case of 404 if the path matches a redirect.
 *
 * @param $page_callback_result
 */
function ucms_seo_drupal_deliver_html_page($page_callback_result) {

  if (PHP_SAPI === 'cli') {
    return;
  }

  if ($page_callback_result === MENU_NOT_FOUND) {

    $manager = ucms_site_manager();
    if ($manager->hasContext()) {

      $redirect = ucms_seo_service()
        ->getRedirectStorage()
        ->load([
            'path' => strtr(request_uri(), ['/?q=' => '/', '/index.php?q=' => '/']),
            'site_id' => $manager->getContext()->getId(),
        ])
      ;

      if ($redirect) {
        return drupal_goto($redirect->getNodeRoute(), [], 301);
      }
    }
  }

  // @todo altered callback name should be stored instead
  if (function_exists('sf_dic_page_delivery_html')) {
    sf_dic_page_delivery_html($page_callback_result);
  }
  drupal_deliver_html_page($page_callback_result);
}
