<?php
/**
 * @file
 * UCMS Search feature.
 *
 * @todo
 *   OK - Use the bulk API whenever possible
 *   OK - Decoralate node index on cron and node index now
 *   OK - Investigate if index without delay is possible (node_insert via ui)
 *   - Fix node delete from index
 *   - Add flexible schema (configurable dependent on fields)
 *   - Allow multiple facet widgets
 *   - Add checkbox based facet
 *   - Add sort widgets
 *   OK - Add drush integration
 *   - Decoralate Lucene query builder and Lucene query string formatting
 *   - Add Elastic search array query formatting (must, must not, etc...)
 */

/**
 * Default number of items index each cron run.
 *
 * FIXME: Ugly define/variable_get
 */
define('UCMS_SEARCH_CRON_INDEX_LIMIT', variable_get('ucms_search_elastic_index_limit', 500));

/**
 * Default search per page limit.
 */
const UCMS_SEARCH_LIMIT = 100;

/**
 * Default search per page limit.
 */
const UCMS_SEARCH_INDEX_NOW_LIMIT = 50;

/**
 * Cache key: index list.
 */
const UCMS_SEARCH_CACHE_INDEX_LIST = 'ucms_search_index_list';

/**
 * So, Drupal 8 sucks they don't have any real API for this...
 */
require_once __DIR__ . '/ucms_search.batch.inc';

/**
 * ÂµSync integration.
 */
require_once __DIR__ . '/ucms_search.usync.inc';

/**
 * Field formatter.
 */
require_once __DIR__ . '/ucms_search.field_formatters.inc';

/**
 * Implements hook_menu().
 */
function ucms_search_menu() {
  $items = [];

  $items['search/autocomplete/%'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Search\Controller\AutocompleteController::search', 2],
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/config/search/indices'] = [
    'title'             => "Search indices",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Search\Admin\IndexListForm'],
    'access arguments'  => ['administer nodes'],
    'description'       => "Manage search indices.",
    'type'              => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Get the index storage instance.
 *
 * @return \MakinaCorpus\Ucms\Search\IndexStorage
 */
function ucms_search_index() {
  return \Drupal::service('ucms_search.index_storage');
}

/**
 * Menu helper.
 *
 * @param string $index
 *
 * @return string
 *  Index name if exists.
 */
function ucms_search_index_title($index) {
  $list = ucms_search_index()->names();
  if (array_key_exists($index, $list)) {
    return $list[$index];
  }
  return false;
}

/**
 * Get elastic search client.
 *
 * @return \Elasticsearch\Client
 *
 * @deprecated
 */
function ucms_search_client_get() {
  return \Drupal::service('ucms_search.elastic.client');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ucms_search_form_node_form_alter(&$form, &$form_state) {
  // If a node is modified from the node form, we must index it right now
  // so that when the user returns on the node admin pages, he'll see nodes
  // right away. This must be an opt-in behavior, false by default, in order
  // to avoid any batch updating nodes from triggering this once per node.
  // Also this will trigger the 'refresh' elastic option to be true at index
  // time, which may cause performance problems on the shard if you do it too
  // much on certain indices.
  $form['ucms_index_now'] = ['#type' => 'value', '#value' => true];
}

/**
 * Implements hook_node_insert().
 */
function ucms_search_node_insert($node) {
  try {
    // @see ucms_search_form_node_form_alter().
    if (isset($node->ucms_index_now) && $node->ucms_index_now) {
      ucms_search_index()->indexer()->upsert($node, false, true);
    } else {
      ucms_search_index()->indexer()->enqueue([$node]);
    }
  } catch (\Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
  }
}

/**
 * Implements hook_node_update().
 */
function ucms_search_node_update($node) {
  try {
    // @see ucms_search_form_node_form_alter().
    if (isset($node->ucms_index_now) && $node->ucms_index_now) {
      ucms_search_index()->indexer()->upsert($node, false, true);
    } else {
      ucms_search_index()->indexer()->enqueue([$node]);
    }
  } catch (\Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
  }
}

/**
 * Implements hook_node_delete().
 */
function ucms_search_node_delete($node) {
  try {
    ucms_search_index()->indexer()->delete($node);
  } catch (\Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
  }
}

/**
 * Implements hook_cron().
 */
if (!module_exists('elysia_cron')) {

  function ucms_search_cron() {

    // This will happen when install and enable happens during the same PHP
    // runtime, we don't care about clearing the indexes on install.
    if (\Drupal::getContainer()->has('ucms_search.index_storage')) {
      ucms_search_index()->indexer()->bulkDequeue();
    }
    // Do this check **maybe** for same previous reason??
    if (\Drupal::getContainer()->has('ucms_search.attachment_indexer')) {
      \Drupal::service('ucms_search.attachment_indexer')->bulkAttachmentDequeue();
    }
  }
}

/**
 * Implements hook_cronapi().
 */
function ucms_search_cronapi($op, $job = NULL) {
  if ('list' !== $op) {
    return;
  }

  $items = [];

  $items['ucms_search_cron_search_indices'] = [
    'description' => 'Update search indices',
    'rule' => '*/15 * * * *',
    'weight' => 1,
  ];
  $items['ucms_search_cron_search_attachment'] = [
    'description' => 'Update search attachments',
    'rule' => '*/15 * * * *',
    'weight' => 2,
  ];

  return $items;
}

function ucms_search_cron_search_indices() {
  ucms_search_index()->indexer()->bulkDequeue();
}

function ucms_search_cron_search_attachment() {
  \Drupal::service('ucms_search.attachment_indexer')->bulkAttachmentDequeue();
}
