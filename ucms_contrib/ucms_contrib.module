<?php
/**
 * @file
 * UCMS  - Contribution.
 */

use Drupal\node\NodeInterface;
use MakinaCorpus\ACL\Permission;
use MakinaCorpus\Ucms\Contrib\Admin\NodeTabsForm;
use MakinaCorpus\Ucms\Contrib\Controller\NodeController;
use MakinaCorpus\Ucms\Contrib\Filter\MediaFilter;
use MakinaCorpus\Ucms\Contrib\Form\NodeAddToSite;
use MakinaCorpus\Ucms\Contrib\Form\NodeDuplicate;
use MakinaCorpus\Ucms\Contrib\Form\NodeFlag;
use MakinaCorpus\Ucms\Contrib\Form\NodeLock;
use MakinaCorpus\Ucms\Contrib\Form\NodeMakeGlobal;
use MakinaCorpus\Ucms\Contrib\Form\NodeMakeCorporate;
use MakinaCorpus\Ucms\Contrib\Form\NodePublish;
use MakinaCorpus\Ucms\Contrib\Form\NodeStar;
use MakinaCorpus\Ucms\Contrib\Form\NodeTransfer;
use MakinaCorpus\Ucms\Contrib\Form\NodeUnflag;
use MakinaCorpus\Ucms\Contrib\Form\NodeUnlock;
use MakinaCorpus\Ucms\Contrib\Form\NodeUnmakeCorporate;
use MakinaCorpus\Ucms\Contrib\Form\NodeUnpublish;
use MakinaCorpus\Ucms\Contrib\Form\NodeUnstar;
use MakinaCorpus\Ucms\Site\Access;

/**
 * Field integration
 */
require_once __DIR__ . '/ucms_contrib.field.inc';

/**
 * Implements hook_menu().
 */
function ucms_contrib_menu() {
  // Prevent using service during install.
  if (defined('MAINTENANCE_MODE')) {
    return [];
  }

  $items = [];

  // Main administration pages.
  $typeHandler = ucms_contrib_type_handler_get();
  foreach ($typeHandler->getTabs() as $tab => $label) {
    $first = true;
    $weight = -100;
    foreach ($typeHandler->getAdminPages() as $page => $definition) {
      if ($first) {
        $first = false;
        $route = 'admin/dashboard/' . $tab;
        $items[$route] = [
          'title'             => $label,
          'page callback'     => 'sf_dic_page',
          'page arguments'    => [NodeController::class . '::nodeAdminList', $tab, $page],
          'type'              => MENU_NORMAL_ITEM,
          'weight'            => $weight++,
        ];
        $items['admin/dashboard/' . $tab . '/' . $page] = [
          'title'             => $definition['title'],
          'type'              => MENU_DEFAULT_LOCAL_TASK,
          'weight'            => $weight++,
        ];
      } else {
        $route = 'admin/dashboard/' . $tab . '/' . $page;
        $items[$route] = [
          'title'             => $definition['title'],
          'page callback'     => 'sf_dic_page',
          'page arguments'    => [NodeController::class . '::nodeAdminList', $tab, $page],
          'type'              => MENU_LOCAL_TASK,
          'weight'            => $weight++,
        ];
      }

      if (is_callable($definition['access'])) {
        $items[$route]['access callback'] = $definition['access'];
      } else if (is_string($definition['access'])) {
        $items[$route]['access arguments'] = [$definition['access']];
      } else {
        $items[$route]['access arguments'] = $definition['access'];
      }
    }
  }

  // Node actions.
  node_type_cache_reset();
  foreach (node_type_get_types() as $type) {
    $typeUrlKey = str_replace('_', '-', $type->type);

    $items['node/add-to-site/' . $typeUrlKey] = [
      'title'             => "New !type for my site",
      'title arguments'   => ['!type' => strtolower($type->name)],
      'page callback'     => 'sf_dic_page_form',
      'page arguments'    => [NodeAddToSite::class, $type->type],
      'access callback'   => 'ucms_contrib_menu_node_access_add_to_site',
      'access arguments'  => [$type->type],
      'type'              => MENU_CALLBACK,
    ];
  }
  $items['node/%node/publish'] = [
    'title'             => "Publish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodePublish::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Permission::PUBLISH, 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unpublish'] = [
    'title'             => "Unpublish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeUnpublish::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Permission::PUBLISH, 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/report'] = [
    'title'             => "Flag as inappropriate",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeFlag::class, 1],
    'access callback'   => 'ucms_contrib_menu_node_access_flag',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unreport'] = [
    'title'             => "Un-flag as innappropriate",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeUnflag::class, 1],
    'access callback'   => 'ucms_contrib_menu_node_access_unflag',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/star'] = [
    'title'             => "Star",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeStar::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Access::PERM_CONTENT_MANAGE_STARRED, 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unstar'] = [
    'title'             => "Unstar",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeUnstar::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Access::PERM_CONTENT_MANAGE_STARRED, 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/lock'] = [
    'title'             => "Lock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeLock::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Permission::LOCK, 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unlock'] = [
    'title'             => "Unlock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeUnlock::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Permission::LOCK, 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/duplicate'] = [
    'title'             => "Edit",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeDuplicate::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [[Permission::UPDATE, Permission::PUBLISH], 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/clone'] = [
    'title'             => "Edit",
    'page callback'     => 'ucms_contrib_node_clone_form',
    'page arguments'    => [1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [[Permission::UPDATE, Permission::PUBLISH], 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/make-global'] = [
    'title'             => "Add to global contents",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeMakeGlobal::class, 1],
    'access callback'   => 'sf_acl_is_granted',
    'access arguments'  => [Access::PERM_CONTENT_MANAGE_GLOBAL],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/transfer'] = [
    'title'             => "Transfer ownership",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeTransfer::class, 1],
    'access callback'   => 'ucms_contrib_menu_node_access_transfer',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/make-group'] = [
    'title'             => "Define as corporate content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeMakeCorporate::class, 1],
    'access callback'   => 'ucms_contrib_menu_node_access_group',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unmake-group'] = [
    'title'             => "Remove from corporate contents",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeUnmakeCorporate::class, 1],
    'access callback'   => 'ucms_contrib_menu_node_access_group',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // Returns the rendered node in a JSON response.
  $items['node/%node/ajax'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [NodeController::class . '::view', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['view', 1],
  ];

  // Site configuration.
  $items['admin/structure/content'] = [
    'title'             => "Contribution user interface",
    'description'       => "Manage content types categorisation and how the main contribution user interface will look like and behave.",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [NodeTabsForm::class],
    'access arguments'  => ['administer content types'],
    'type'              => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ucms_contrib_menu_alter(&$items) {
  // No tabs but real callback now
  $items['node/%node/edit']['type'] = MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB;
  $items['node/%node/revisions']['type'] = MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB;
  $items['node/%node/revisions']['access callback'] = 'node_access';
  $items['node/%node/revisions']['access arguments'] = ['update', 1];
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_add_to_site($type) {

  $user = \Drupal::service('current_user');
  $typeHandler = ucms_contrib_type_handler_get();
  $siteAccess = ucms_site_manager()->getAccess();
  $nodeAccess = ucms_site_node_access_helper();

  if (ucms_site_manager()->hasContext()) {
    // This does not make any sense outside of the admin context
    return false;
  }
  if (!$nodeAccess->userCanCreateInAnySite($user, $type)) {
    // Locked type can't be created by non-technical admin
    return false;
  }

  if ($siteAccess->userIsWebmaster($user) && in_array($type, $typeHandler->getAllTypes())) {
    // Webmasters can create anything
    return true;
  } else if ($siteAccess->userIsContributor($user) && in_array($type, $typeHandler->getEditorialTypes())) {
    // Contributors can only create editorial content
    return true;
  }

  return false;
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_flag(NodeInterface $node) {
  return sf_acl_is_granted(Access::PERM_CONTENT_FLAG) && sf_acl_is_granted(Permission::UPDATE, $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_unflag(NodeInterface $node) {
  return sf_acl_is_granted(Access::PERM_CONTENT_UNFLAG) && sf_acl_is_granted(Permission::UPDATE, $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_transfer(NodeInterface $node) {
  return sf_acl_is_granted(Access::PERM_CONTENT_TRANSFER_OWNERSHIP) && sf_acl_is_granted(Permission::UPDATE, $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_group(NodeInterface $node) {
  sf_acl_is_granted(Access::ACL_PERM_CONTENT_PROMOTE_CORPORATE, $node);
}

/**
 * Callback for the node cloning form.
 */
function ucms_contrib_node_clone_form($node) {

  /** @var $manager \MakinaCorpus\Ucms\Site\NodeManager */
  $manager = \Drupal::service('ucms_site.node_manager');

  $clone = $manager->createUnsavedClone($node, ['uid' => \Drupal::currentUser()->id()]);

  module_load_include('inc', 'node', 'node.pages');

  return drupal_get_form($clone->type . '_node_form', $clone);
}

/**
 * @return \MakinaCorpus\Ucms\Contrib\TypeHandler
 */
function ucms_contrib_type_handler_get() {
  return \Drupal::service('ucms_contrib.type_handler');
}

/**
 * Implements hook_permission().
 */
function ucms_contrib_permission() {
  return [
    'use favorites' => [
      'title' => "Access the favorites feature",
    ],
    'access ucms content overview' => [
      'title' => "Access the UCMS content overview page",
    ],
  ];
}

/**
 * Implements hook_form_node_form_alter().
 */
function ucms_contrib_form_node_form_alter(&$form, &$form_state) {

  $node         = $form_state['node'];
  $user         = \Drupal::currentUser();
  $access       = \Drupal::service('ucms_site.node_access_helper');
  $siteManager  = ucms_site_manager();

  // Node object and database have default values, so depending on context,
  // when creating the node, we do need to set those defaults to the current
  // context defaults instead so that the user access functions will work
  // seamlessly with the non-persisted yet node object.
  if (!$node->id() || $node->isNew()) {
    $node->is_global = !$siteManager->hasContext();
    $form['is_global'] = ['#type' => 'value', '#value' => (int)!$siteManager->hasContext()];
    if ($siteManager->hasContext()) {
      $siteId = $siteManager->getContext()->getId();
      $node->site_id = $siteId;
      $node->ucms_sites = [$siteId];
      $form['site_id'] = ['#type' => 'value', '#value' => $siteId];
    }
  }

  $form['locked'] = [
    '#type' => 'checkbox',
    '#title' => t('Lock this content'),
    '#default_value' => isset($node->is_clonable) ? !((bool) $node->is_clonable) : 0,
    '#weight' => 100,
  ];

  // Adds a cancel button
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $parsed = drupal_parse_url($_GET['destination']);
    $form['actions']['cancel'] = [
      '#markup' => l(t("Cancel"), $parsed['path'], ['query' => $parsed['query'], 'attributes' => ['class' => 'btn btn-warning']]),
    ];
  } else {
    $form['actions']['cancel'] = [
      '#markup' => '<a href="javascript:history.back()" class="btn btn-warning">' . t("Cancel") . '</a>',
    ];
  }

  // Adds the 'submit and add to cart' button. Button group will be done
  // by the theme layer.
  // @todo this needs to be reworked
  $add_to_cart = !$node->id() || !\Drupal::service('ucms_cart.cart')->has($user->id(), $node->id());
  if ($add_to_cart) {
    $submit = $form['actions']['submit']['#submit'];
    $submit[] = 'ucms_contrib_form_node_form_submit_add_to_cart';
    $form['actions']['submit_add_to_cart'] = [
      '#type' => 'submit',
      '#value' => t("Save and add to cart"),
      '#submit' => $submit,
    ];
  }

  $add_and_publish = !$node->id() && (!$access || sf_acl_is_granted(Permission::PUBLISH, $node));
  if ($add_and_publish) {
    $submit = $form['actions']['submit']['#submit'];
    array_unshift($submit, 'ucms_contrib_form_node_form_submit_publish');
    $form['actions']['submit_publish'] = [
      '#type' => 'submit',
      '#value' => t("Save and publish"),
      '#submit' => $submit,
    ];
  }

  if ($add_to_cart && $add_and_publish) {
    $submit = $form['actions']['submit']['#submit'];
    array_unshift($submit, 'ucms_contrib_form_node_form_submit_publish');
    $submit[] = 'ucms_contrib_form_node_form_submit_add_to_cart';
    $form['actions']['submit_publish_add_to_cart'] = [
      '#type' => 'submit',
      '#value' => t("Save, publish and add to cart"),
      '#submit' => $submit,
    ];
  }
}

/**
 * Add to cart action for node form.
 */
function ucms_contrib_form_node_form_submit_add_to_cart($form, &$form_state) {
  // $form['#node'] is the wrong node, when you are creating a new node, it's
  // the non-saved empty version of the node instead of being the one that
  // gets submitted. This would work in update scenario, but for an obscure
  // reason won't when we clone.
  \Drupal::service('ucms_cart.cart')->addFor(\Drupal::currentUser()->id(), $form_state['node']->id());
}

/**
 * Publish action for node form.
 */
function ucms_contrib_form_node_form_submit_publish($form, &$form_state) {
  $form_state['values']['status'] = NODE_PUBLISHED;
}

/**
 * Implements hook_node_submit().
 */
function ucms_contrib_node_submit($node, $form, &$form_state) {
  $node->is_clonable = ((bool) $form_state['values']['locked']) ? 0 : 1;
}

/**
 * Implements hook_admin_paths().
 */
function ucms_contrib_admin_paths() {
  $paths = [
    'node/*/clone' => TRUE,
  ];
  return $paths;
}

/**
 * Implements hook_element_info_alter().
 */
function ucms_contrib_element_info_alter(&$types) {
  $types['text_format']['#process'][] = 'ucms_contrib_process_text_format';
}

/**
 * Process callback for text_format form elements.
 * @staticvar boolean $done
 * @param [] $element
 * @param [] $form_state
 */
function ucms_contrib_process_text_format($element, &$form_state) {
  static $done = false;

  if (module_exists('ckeditor') && !$done) {
    module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
    $profiles = ckeditor_profile_input_formats();

    foreach ($profiles as $profile_name => $inputs) {
      $profile = ckeditor_profile_load($profile_name);

      if (!isset($profile->settings['loadPlugins'])) {
        continue;
      }

      $profile_plugins = array_keys((array) $profile->settings['loadPlugins']);

      if (in_array('ucmsmediadnd', $profile_plugins)) {
        $typeHandler = ucms_contrib_type_handler_get();
        $settings = ['mediaBundles' => $typeHandler->getMediaTypes()];
        drupal_add_js(['ucms_contrib' => $settings], 'setting');
        break;
      }
    }

    $done = true;
  }

  return $element;
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ucms_contrib_ckeditor_plugin() {
  return [
    'ucmsmediadnd' => [
      'name' => 'ucmsmediadnd',
      'desc' => t("UCMS medias drop & paste management"),
      'path' => drupal_get_path('module', 'ucms_contrib') . '/js/ckeditor/',
    ],
  ];
}

/**
 * Implements hook_ckeditor_settings_alter().
 */
function ucms_contrib_ckeditor_settings_alter(&$settings, $context) {
  $settings['contentsCss'][] = url(drupal_get_path('module', 'ucms_contrib') . '/js/ckeditor/styles.css');
}

/**
 * Implements hook_filter_info().
 */
function ucms_contrib_filter_info() {
  return [
    'ucmsmediadnd' => [
      'title'             => t('UCMS Media DnD'),
      'description'       => t('Will transform UCMS DnD markup into content'),
      'prepare callback'  => 'ucms_contrib_filter_media_prepare',
      'process callback'  => 'ucms_contrib_filter_media_process',
      'default settings'  => [],
      'cache'             => (bool)variable_get('ulink_unsafe_text_caching', false),
    ],
  ];
}

/**
 * Implements callback_filter_prepare().
 */
function ucms_contrib_filter_media_prepare($text, $filter, $format, $langcode) {
  return sf_dic_plugin_create(MediaFilter::class, (array)$filter)->prepare($text, $langcode);
}

/**
 * Implements callback_filter_process().
 */
function ucms_contrib_filter_media_process($text, $filter, $format, $langcode) {
  return sf_dic_plugin_create(MediaFilter::class, (array)$filter)->process($text, $langcode)->getProcessedText();
}

/**
 * Implements hook_entity_load().
 */
function ucms_contrib_entity_load($entities, $type) {

  if (!variable_get('ucms_contrib_clone_aware_features', false)) {
    return;
  }

  // Removes the safe value of all text fields items to force the field API
  // to rebuild it.
  // We have to do that to ensure that our filters are well executed
  // at each display of these fields.
  // Unfortunately, implement hook_filter_info_alter() to disable the cacheable
  // behavior of our filters doesn't work...
  foreach ($entities as $entity) {
    list(,, $bundle) = entity_extract_ids($type, $entity);
    foreach (field_info_instances($type, $bundle) as $name => $info) {
      $field = field_info_field($info['field_name']);
      if (
        in_array($field['type'], ['text', 'text_long', 'text_with_summary'], true) &&
        !empty($entity->{$name}[LANGUAGE_NONE])
      ) {
        foreach ($entity->{$name}[LANGUAGE_NONE] as &$item) {
          unset($item['safe_value']);
        }
      }
    }
  }
}
