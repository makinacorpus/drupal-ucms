<?php
/**
 * @file
 * UCMS  - Contribution.
 */

use Drupal\node\NodeInterface;
use MakinaCorpus\Ucms\Contrib\TypeHandler;
use MakinaCorpus\Ucms\Site\Access;
use MakinaCorpus\Ucms\Contrib\Controller\DashboardController;

require_once __DIR__ . '/ucms_contrib.field.inc';

/**
 * Implements hook_menu().
 */
function ucms_contrib_menu() {
  // Prevent using service during install.
  if (defined('MAINTENANCE_MODE')) {
    return [];
  }

  $items = [];
  // Main administration pages.
  foreach (ucms_contrib_type_handler_get()->getTabs() as $key => $label) {
    $items['admin/dashboard/' . $key] = [
      'title'             => $label,
      'page callback'     => 'ucms_contrib_admin_content_page_mine',
      'page arguments'    => [$key],
      'access arguments'  => ['access ucms content overview'],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_NORMAL_ITEM
    ];
    $items['admin/dashboard/' . $key . '/mine'] = [
      'title'             => "My content",
      'type'              => MENU_DEFAULT_LOCAL_TASK,
      'weight'            => -10,
    ];
    $items['admin/dashboard/' . $key . '/global'] = [
      'title'             => "Global",
      'page callback'     => 'ucms_contrib_admin_content_page_global',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_VIEW_GLOBAL],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 90,
    ];
    $items['admin/dashboard/' . $key . '/local'] = [
      'title'             => "Local",
      'title callback'    => "ucms_contrib_admin_content_page_title",
      'page callback'     => 'ucms_contrib_admin_content_page_local',
      'page arguments'    => [$key],
      'access arguments'  => ['access ucms content overview'], // @todo user has sites
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 80,
    ];
    if (TypeHandler::TAB_CONTENT === $key) {
      $items['admin/dashboard/' . $key . '/links'] = [
        'title'             => "Links",
        'page callback'     => 'sf_dic_page',
        'page arguments'    => [DashboardController::class.'::viewAllReference'],
        'access arguments'  => ['access ucms content overview'],
        'file'              => 'ucms_contrib.pages.inc',
        'type'              => MENU_LOCAL_TASK,
        'weight'            => 300,
      ];
    }
  }

  // Node actions.
  node_type_cache_reset();
  foreach (node_type_get_types() as $type) {
    $typeUrlKey = str_replace('_', '-', $type->type);

    $items['node/add-to-site/' . $typeUrlKey] = [
      'title'             => "New !type for my site",
      'title arguments'   => ['!type' => strtolower($type->name)],
      'page callback'     => 'sf_dic_page_form',
      'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeAddToSite', $type->type],
      'access callback'   => 'ucms_contrib_menu_node_access_add_to_site',
      'access arguments'  => [$type->type],
      'type'              => MENU_CALLBACK,
    ];
  }
  $items['node/%node/publish'] = [
    'title'             => "Publish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodePublish', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_publish',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unpublish'] = [
    'title'             => "Unpublish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnpublish', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_publish',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/lock'] = [
    'title'             => "Lock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeLock', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_lock',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unlock'] = [
    'title'             => "Unlock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnlock', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_lock',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/duplicate'] = [
    'title'             => "Edit",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeDuplicate', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_copy_on_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/clone'] = [
    'title'             => "Edit",
    'page callback'     => 'ucms_contrib_node_clone_form',
    'page arguments'    => [1],
    'access callback'   => 'ucms_contrib_menu_node_access_copy_on_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/make-global'] = [
    'title'             => "Add to global contents",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeMakeGlobal', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_global',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/transfer'] = [
    'title'             => "Transfer ownership",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeTransfer', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_transfer',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // Returns the rendered node in a JSON response.
  $items['node/%node/ajax'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['\MakinaCorpus\Ucms\Contrib\Controller\NodeController::view', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['view', 1],
  ];

  // Site configuration.
  $items['admin/structure/content'] = [
    'title'             => "Contribution user interface",
    'description'       => "Manage content types categorisation and how the main contribution user interface will look like and behave.",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Admin\NodeTabsForm'],
    'access arguments'  => ['administer content types'],
    'type'              => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ucms_contrib_menu_alter(&$items) {
  // No tabs but real callback now
  $items['node/%node/edit']['type'] = MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB;
  $items['node/%node/revisions']['type'] = MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB;
  $items['node/%node/revisions']['access callback'] = 'node_access';
  $items['node/%node/revisions']['access arguments'] = ['update', 1];
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_add_to_site($type) {

  $user = \Drupal::service('current_user');
  $typeHandler = ucms_contrib_type_handler_get();
  $siteAccess = ucms_site_manager()->getAccess();
  $nodeAccess = ucms_site_node_access_helper();

  if (ucms_site_manager()->hasContext()) {
    // This does not make any sense outside of the admin context
    return false;
  }
  if (!$nodeAccess->userCanCreateInAnySite($user, $type)) {
    // Locked type can't be created by non-technical admin
    return false;
  }

  if ($siteAccess->userIsWebmaster($user) && in_array($type, $typeHandler->getAllTypes())) {
    // Webmasters can create anything
    return true;
  } else if ($siteAccess->userIsContributor($user) && in_array($type, $typeHandler->getEditorialTypes())) {
    // Contributors can only create editorial content
    return true;
  }

  return false;
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_global() {
  return user_access(Access::PERM_CONTENT_MANAGE_GLOBAL);
}

/**
 * Menu title helper
 */
function ucms_contrib_admin_content_page_title() {
  /** @var \MakinaCorpus\Ucms\Site\SiteManager $manager */
  $manager = \Drupal::service('ucms_site.manager');
  return $manager->hasContext() ? t('In this site') : t('Local');
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_publish(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanPublish(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_lock(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanLock(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_copy_on_edit(NodeInterface $node) {
  $account = \Drupal::currentUser();
  return ucms_site_node_access_helper()->userCanDuplicate($account, $node) || $node->access(Access::OP_UPDATE, $account);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_transfer(NodeInterface $node) {
  $user = \Drupal::currentUser();
  return (
    $user->hasPermission(Access::PERM_CONTENT_TRANSFER_OWNERSHIP) &&
    $node->access(Access::OP_UPDATE, $user)
  );
}

/**
 * Callback for the node cloning form.
 */
function ucms_contrib_node_clone_form($node) {

  /** @var $manager \MakinaCorpus\Ucms\Site\NodeManager */
  $manager = \Drupal::service('ucms_site.node_manager');

  $clone = $manager->createUnsavedClone($node, ['uid' => \Drupal::currentUser()->id()]);

  return drupal_get_form($clone->type . '_node_form', $clone);
}

/**
 * Implements hook_form().
 */
function ucms_contrib_forms($form_id, $args) {
  // Because we are going to get some node form out of context, we must ensure
  // that its files are always loaded all right when doing AJAX queries over.
  // @see ucms_contrib_node_clone_form()
  // @see ucms_contrib_form_node_form_alter()
  if ('_node_form' === substr($form_id, -10)) {
    module_load_include('inc', 'node', 'node.pages');
  }
}

/**
 * @return \MakinaCorpus\Ucms\Contrib\TypeHandler
 */
function ucms_contrib_type_handler_get() {
  return \Drupal::service('ucms_contrib.type_handler');
}

/**
 * Implements hook_form_node_form_alter().
 */
function ucms_contrib_form_node_form_alter(&$form, &$form_state) {

  $node         = $form_state['node'];
  $user         = \Drupal::currentUser();
  $access       = \Drupal::service('ucms_site.node_access_helper');
  $siteManager  = ucms_site_manager();

  // @see ucms_contrib_forms()
  $form_state['build_info']['files'][] = drupal_get_path('module', 'node').'/node.pages.inc';

  // Node object and database have default values, so depending on context,
  // when creating the node, we do need to set those defaults to the current
  // context defaults instead so that the user access functions will work
  // seamlessly with the non-persisted yet node object.
  if (!$node->id() || $node->isNew()) {
    $node->is_global = !$siteManager->hasContext();
    $form['is_global'] = ['#type' => 'value', '#value' => (int)!$siteManager->hasContext()];
    if ($siteManager->hasContext()) {
      $siteId = $siteManager->getContext()->getId();
      $node->site_id = $siteId;
      $node->ucms_sites = [$siteId];
      $form['site_id'] = ['#type' => 'value', '#value' => $siteId];
    }
  }

  $form['locked'] = [
    '#type' => 'checkbox',
    '#title' => t('Lock this content'),
    '#default_value' => isset($node->is_clonable) ? !((bool) $node->is_clonable) : 0,
    '#weight' => 100,
  ];

  // Adds a cancel button
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $parsed = drupal_parse_url($_GET['destination']);
    $form['actions']['cancel'] = [
      '#markup' => l(t("Cancel"), $parsed['path'], ['query' => $parsed['query'], 'attributes' => ['class' => 'btn btn-warning']]),
    ];
  } else {
    $form['actions']['cancel'] = [
      '#markup' => '<a href="javascript:history.back()" class="btn btn-warning">' . t("Cancel") . '</a>',
    ];
  }

  $add_and_publish = !$node->status && (!$access || $access->userCanPublish($user, $node));
  if ($add_and_publish) {
    $submit = $form['actions']['submit']['#submit'];
    array_unshift($submit, 'ucms_contrib_form_node_form_submit_publish');
    $form['actions']['submit_publish'] = [
      '#type' => 'submit',
      '#value' => t("Save and publish"),
      '#submit' => $submit,
    ];
  }
}

/**
 * Publish action for node form.
 */
function ucms_contrib_form_node_form_submit_publish($form, &$form_state) {
  $form_state['values']['status'] = NODE_PUBLISHED;
}

/**
 * Implements hook_node_submit().
 */
function ucms_contrib_node_submit($node, $form, &$form_state) {
  $node->is_clonable = ((bool) $form_state['values']['locked']) ? 0 : 1;
}

/**
 * Implements hook_admin_paths().
 */
function ucms_contrib_admin_paths() {
  $paths = [
    'node/*/clone' => TRUE,
  ];
  return $paths;
}

/**
 * Implements hook_element_info_alter().
 */
function ucms_contrib_element_info_alter(&$types) {
  $types['text_format']['#process'][] = 'ucms_contrib_process_text_format';
}

/**
 * Implements hook_entity_load().
 */
function ucms_contrib_entity_load($entities, $type) {

  if (!variable_get('ucms_contrib_clone_aware_features', false)) {
    return;
  }

  // Removes the safe value of all text fields items to force the field API
  // to rebuild it.
  // We have to do that to ensure that our filters are well executed
  // at each display of these fields.
  // Unfortunately, implement hook_filter_info_alter() to disable the cacheable
  // behavior of our filters doesn't work...
  foreach ($entities as $entity) {
    list(,, $bundle) = entity_extract_ids($type, $entity);
    foreach (field_info_instances($type, $bundle) as $name => $info) {
      $field = field_info_field($info['field_name']);
      if (
        in_array($field['type'], ['text', 'text_long', 'text_with_summary'], true) &&
        !empty($entity->{$name}[LANGUAGE_NONE])
      ) {
        foreach ($entity->{$name}[LANGUAGE_NONE] as &$item) {
          unset($item['safe_value']);
        }
      }
    }
  }
}
