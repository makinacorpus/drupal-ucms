<?php
/**
 * @file
 * UCMS  - Contribution.
 *
 * @todo
 *   - Keep cart items order same as insert
 *   - Add other possible cart view modes (grid, list, ...)
 *   - Add other possible UI view modes (grid, list, ...)
 *   - Add UI sorting
 */

use Drupal\node\NodeInterface;

use MakinaCorpus\Ucms\Contrib\Controller\CartController;
use MakinaCorpus\Ucms\Contrib\Filter\EntityLinkFilter;
use MakinaCorpus\Ucms\Contrib\Filter\MediaFilter;
use MakinaCorpus\Ucms\Site\Access;

require_once __DIR__ . '/ucms_contrib.field.inc';

/**
 * View mode for content display.
 */
const UCMS_VIEW_MODE_CONTENTADMIN = 'contentadmin';

/**
 * View mode for cart display.
 */
const UCMS_VIEW_MODE_FAVORITE = 'favorite';

/**
 * Image style for search.
 */
const UCMS_STYLE_CONTENTADMIN = 'contentadmin';

/**
 * Image style for favorite.
 */
const UCMS_STYLE_FAVORITE = 'favorite';

/**
 * Implements hook_menu().
 */
function ucms_contrib_menu() {
  // Prevent using service during install.
  if (defined('MAINTENANCE_MODE')) {
    return [];
  }

  $items = [];
  // Main administration pages.
  foreach (ucms_contrib_type_handler_get()->getTabs() as $key => $label) {
    $items['admin/dashboard/' . $key] = [
      'title'             => $label,
      'page callback'     => 'ucms_contrib_admin_content_page_mine',
      'page arguments'    => [$key],
      'access arguments'  => ['access ucms content overview'],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_NORMAL_ITEM
    ];
    $items['admin/dashboard/' . $key . '/mine'] = [
      'title'             => "My content",
      'type'              => MENU_DEFAULT_LOCAL_TASK,
      'weight'            => -10,
    ];
    $items['admin/dashboard/' . $key . '/global'] = [
      'title'             => "Global",
      'page callback'     => 'ucms_contrib_admin_content_page_global',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_VIEW_GLOBAL],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 90,
    ];
    $items['admin/dashboard/' . $key . '/group'] = [
      'title'             => "Group",
      'page callback'     => 'ucms_contrib_admin_content_page_group',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_VIEW_GROUP],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 100,
    ];
    $items['admin/dashboard/' . $key . '/local'] = [
      'title'             => "Local",
      'page callback'     => 'ucms_contrib_admin_content_page_local',
      'page arguments'    => [$key],
      'access arguments'  => ['access ucms content overview'], // @todo user has sites
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 80,
    ];
    $items['admin/dashboard/' . $key . '/flagged'] = [
      'title'             => "Flagged",
      'page callback'     => 'ucms_contrib_admin_content_page_flagged',
      'page arguments'    => [$key],
      'access callback'   => 'ucms_contrib_menu_node_access_global',
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 200,
    ];
    $items['admin/dashboard/' . $key . '/starred'] = [
      'title'             => "Starred",
      'page callback'     => 'ucms_contrib_admin_content_page_starred',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_MANAGE_GLOBAL],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 210,
    ];
  }

  // Node actions.
  node_type_cache_reset();
  foreach (node_type_get_types() as $type) {
    $typeUrlKey = str_replace('_', '-', $type->type);

    $items['node/add-to-site/' . $typeUrlKey] = [
      'title'             => "New !type for my site",
      'title arguments'   => ['!type' => strtolower($type->name)],
      'page callback'     => 'sf_dic_page_form',
      'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeAddToSite', $type->type],
      'access callback'   => 'ucms_contrib_menu_node_access_add_to_site',
      'access arguments'  => [$type->type],
      'type'              => MENU_CALLBACK,
    ];
  }
  $items['node/%node/publish'] = [
    'title'             => "Publish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodePublish', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_publish',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unpublish'] = [
    'title'             => "Unpublish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnpublish', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_publish',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/report'] = [
    'title'             => "Flag as inappropriate",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeFlag', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_flag',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unreport'] = [
    'title'             => "Un-flag as innappropriate",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnflag', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_unflag',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/star'] = [
    'title'             => "Star",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeStar', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_star',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unstar'] = [
    'title'             => "Unstar",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnstar', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_star',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/lock'] = [
    'title'             => "Lock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeLock', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_lock',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unlock'] = [
    'title'             => "Unlock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnlock', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_lock',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/duplicate'] = [
    'title'             => "Edit",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeDuplicate', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_copy_on_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/clone'] = [
    'title'             => "Edit",
    'page callback'     => 'ucms_contrib_node_clone_form',
    'page arguments'    => [1],
    'access callback'   => 'ucms_contrib_menu_node_access_copy_on_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/make-global'] = [
    'title'             => "Add to global contents",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeMakeGlobal', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_global',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/make-group'] = [
    'title'             => "Define as group content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeMakeGroup', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_group',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/unmake-group'] = [
    'title'             => "Remove from group contents",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnmakeGroup', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_group',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/transfer'] = [
    'title'             => "Transfer ownership",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeTransfer', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_transfer',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // Returns the rendered node in a JSON response.
  $items['node/%node/ajax'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['\MakinaCorpus\Ucms\Contrib\Controller\NodeController::view', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['view', 1],
  ];

  // Site configuration.
  $items['admin/structure/content'] = [
    'title'             => "Contribution user interface",
    'description'       => "Manage content types categorisation and how the main contribution user interface will look like and behave.",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Admin\NodeTabsForm'],
    'access arguments'  => ['administer content types'],
    'type'              => MENU_NORMAL_ITEM,
  ];

  // Cart operations.
  $items['admin/cart/refresh'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['\MakinaCorpus\Ucms\Contrib\Controller\CartController::refresh'],
    'access arguments'  => ['use favorites'],
  ];
  $items['admin/cart/%node/add'] = [
    'title'             => "Content",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['\MakinaCorpus\Ucms\Contrib\Controller\CartController::add', 2],
    'access arguments'  => ['use favorites'],
  ];
  $items['admin/cart/%node/remove'] = [
    'title'             => "Content",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['\MakinaCorpus\Ucms\Contrib\Controller\CartController::remove', 2],
    'access arguments'  => ['use favorites'],
  ];

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ucms_contrib_menu_alter(&$items) {
  // No tabs but real callback now
  $items['node/%node/edit']['type'] = MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB;
  $items['node/%node/revisions']['type'] = MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB;
  $items['node/%node/revisions']['access callback'] = 'node_access';
  $items['node/%node/revisions']['access arguments'] = ['update', 1];
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_add_to_site($type) {

  $user = \Drupal::service('current_user');
  $typeHandler = ucms_contrib_type_handler_get();
  $siteAccess = ucms_site_manager()->getAccess();
  $nodeAccess = ucms_site_node_access_helper();

  if (ucms_site_manager()->hasContext()) {
    // This does not make any sense outside of the admin context
    return false;
  }
  if (!$nodeAccess->userCanCreateInAnySite($user, $type)) {
    // Locked type can't be created by non-technical admin
    return false;
  }

  if ($siteAccess->userIsWebmaster($user) && in_array($type, $typeHandler->getAllTypes())) {
    // Webmasters can create anything
    return true;
  } else if ($siteAccess->userIsContributor($user) && in_array($type, $typeHandler->getEditorialTypes())) {
    // Contributors can only create editorial content
    return true;
  }

  return false;
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_global() {
  return user_access(Access::PERM_CONTENT_MANAGE_GLOBAL);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_group(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanPromoteToGroup(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_publish(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanPublish(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_star(NodeInterface $node) {
  return user_access(Access::PERM_CONTENT_MANAGE_STARRED);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_flag(NodeInterface $node) {
  return user_access(Access::PERM_CONTENT_FLAG);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_unflag(NodeInterface $node) {
  return user_access(Access::PERM_CONTENT_UNFLAG) && $node->access(Access::OP_UPDATE);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_lock(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanLock(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_copy_on_edit(NodeInterface $node) {
  $account = \Drupal::currentUser();
  return ucms_site_node_access_helper()->userCanDuplicate($account, $node) || $node->access(Access::OP_UPDATE, $account);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_transfer(NodeInterface $node) {
  $user = \Drupal::currentUser();
  return (
    $user->hasPermission(Access::PERM_CONTENT_TRANSFER_OWNERSHIP) &&
    $node->access(Access::OP_UPDATE, $user)
  );
}

/**
 * Callback for the node cloning form.
 */
function ucms_contrib_node_clone_form($node) {

  /** @var $manager \MakinaCorpus\Ucms\Site\NodeManager */
  $manager = \Drupal::service('ucms_site.node_manager');

  $clone = $manager->createUnsavedClone($node, ['uid' => \Drupal::currentUser()->id()]);

  return drupal_get_form($clone->type . '_node_form', $clone);
}

/**
 * Implements hook_form().
 */
function ucms_contrib_forms($form_id, $args) {
  // Because we are going to get some node form out of context, we must ensure
  // that its files are always loaded all right when doing AJAX queries over.
  // @see ucms_contrib_node_clone_form()
  // @see ucms_contrib_form_node_form_alter()
  if ('_node_form' === substr($form_id, -10)) {
    module_load_include('inc', 'node', 'node.pages');
  }
}

/**
 * @return \MakinaCorpus\Ucms\Contrib\TypeHandler
 */
function ucms_contrib_type_handler_get() {
  return \Drupal::service('ucms_contrib.type_handler');
}

/**
 * Implements hook_permission().
 */
function ucms_contrib_permission() {
  return [
    'use favorites' => [
      'title' => "Access the favorites feature",
    ],
    'access ucms content overview' => [
      'title' => "Access the UCMS content overview page",
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function ucms_contrib_theme() {
  return [
    'ucms_contrib_cart' => [
      'variables' => [
        'account' => null,
        'items'   => [],
        'actions' => null,
        'display' => null,
      ],
      'template'  => 'ucms-contrib-cart',
    ],
    'ucms_contrib_content_result_grid' => [
      'variables' => [
        'nodes'     => [],
        'view_mode' => UCMS_VIEW_MODE_CONTENTADMIN,
        'mode'      => '',
      ],
      'template'  => 'ucms-contrib-content-result-grid',
    ],
  ];
}

/**
 * Implements hook_entity_info_alter().
 */
function ucms_contrib_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'][UCMS_VIEW_MODE_CONTENTADMIN] = [
    'label' => t('Content admin display'),
    'custom settings' => false,
  ];
  $entity_info['node']['view modes'][UCMS_VIEW_MODE_FAVORITE] = [
    'label' => t('Favorite in cart'),
    'custom settings' => false,
  ];
}

/**
 * Implements hook_image_default_styles().
 */
function ucms_contrib_image_default_styles() {
  return [
    UCMS_STYLE_CONTENTADMIN => [
      'effects' => [[
        'name' => 'image_scale_and_crop',
        'data' => [
          'width'   => 285, // ~ col-md-3
          'height'  => 285,
          'upscale' => 1,
        ],
        'weight' => 0,
      ]],
    ],
    UCMS_STYLE_FAVORITE => [
      'effects' => [[
        'name' => 'image_scale_and_crop',
        'data' => [
          'width'   => 120, // ~ col-md-6 in cart
          'height'  => 120,
          'upscale' => 1,
        ],
        'weight' => 0,
      ]],
    ],
  ];
}

/**
 * Implements hook_node_view_alter().
 *
 * Removes links from nodes when in build modes used for back office.
 */
function ucms_contrib_node_view_alter(&$build) {
  switch ($build['#view_mode']) {

    case UCMS_VIEW_MODE_CONTENTADMIN:
    case UCMS_VIEW_MODE_FAVORITE:
      $build['links']['#access'] = false;
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Removes submitted information and adds necessary stuff for JS.
 */
function ucms_contrib_preprocess_node(&$variables) {

  // Adds the data-nid attribute on all nodes.
  // @todo exclude cart as of now else it'll trigger bugs:
  //   - remove custom template for cart items
  if ('favorite' !== $variables['view_mode']) {
    $variables['attributes_array']['data-nid'] = $variables['node']->nid;
  }

  switch ($variables['view_mode']) {

    case UCMS_VIEW_MODE_CONTENTADMIN:
    case UCMS_VIEW_MODE_FAVORITE:
      $variables['submitted'] = null;
      break;
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function ucms_contrib_form_node_form_alter(&$form, &$form_state) {

  $node         = $form_state['node'];
  $user         = \Drupal::currentUser();
  $access       = \Drupal::service('ucms_site.node_access_helper');
  $siteManager  = ucms_site_manager();

  // @see ucms_contrib_forms()
  $form_state['build_info']['files'][] = drupal_get_path('module', 'node').'/node.pages.inc';

  // Node object and database have default values, so depending on context,
  // when creating the node, we do need to set those defaults to the current
  // context defaults instead so that the user access functions will work
  // seamlessly with the non-persisted yet node object.
  if (!$node->id() || $node->isNew()) {
    $node->is_global = !$siteManager->hasContext();
    $form['is_global'] = ['#type' => 'value', '#value' => (int)!$siteManager->hasContext()];
    if ($siteManager->hasContext()) {
      $siteId = $siteManager->getContext()->getId();
      $node->site_id = $siteId;
      $node->ucms_sites = [$siteId];
      $form['site_id'] = ['#type' => 'value', '#value' => $siteId];
    }
  }

  $form['locked'] = [
    '#type' => 'checkbox',
    '#title' => t('Lock this content'),
    '#default_value' => isset($node->is_clonable) ? !((bool) $node->is_clonable) : 0,
    '#weight' => 100,
  ];

  // Adds the 'submit and add to cart' button. Button group will be done
  // by the theme layer.
  $add_to_cart = !$node->id() || !\Drupal::service('ucms_contrib.cart')->has($user->id(), $node->id());
  if ($add_to_cart) {
    $submit = $form['actions']['submit']['#submit'];
    $submit[] = 'ucms_contrib_form_node_form_submit_add_to_cart';
    $form['actions']['submit_add_to_cart'] = [
      '#type' => 'submit',
      '#value' => t("Save and add to cart"),
      '#submit' => $submit,
    ];
  }

  $add_and_publish = (!$access || $access->userCanPublish($user, $node));
  if ($add_and_publish) {
    $submit = $form['actions']['submit']['#submit'];
    array_unshift($submit, 'ucms_contrib_form_node_form_submit_publish');
    $form['actions']['submit_publish'] = [
      '#type' => 'submit',
      '#value' => t("Save and publish"),
      '#submit' => $submit,
    ];
  }

  if ($add_to_cart && $add_and_publish) {
    $submit = $form['actions']['submit']['#submit'];
    array_unshift($submit, 'ucms_contrib_form_node_form_submit_publish');
    $submit[] = 'ucms_contrib_form_node_form_submit_add_to_cart';
    $form['actions']['submit_publish_add_to_cart'] = [
      '#type' => 'submit',
      '#value' => t("Save, publish and add to cart"),
      '#submit' => $submit,
    ];
  }
}

/**
 * Add to cart action for node form.
 */
function ucms_contrib_form_node_form_submit_add_to_cart($form, &$form_state) {
  // $form['#node'] is the wrong node, when you are creating a new node, it's
  // the non-saved empty version of the node instead of being the one that
  // gets submitted. This would work in update scenario, but for an obscure
  // reason won't when we clone.
  \Drupal::service('ucms_contrib.cart')->addFor(\Drupal::currentUser()->id(), $form_state['node']->id());
}

/**
 * Publish action for node form.
 */
function ucms_contrib_form_node_form_submit_publish($form, &$form_state) {
  $form_state['values']['status'] = NODE_PUBLISHED;
}

/**
 * Implements hook_node_submit().
 */
function ucms_contrib_node_submit($node, $form, &$form_state) {
  $node->is_clonable = ((bool) $form_state['values']['locked']) ? 0 : 1;
}

/**
 * Render one's favorite cart.
 *
 * @return []
 *   drupal_render() friendly structure.
 */
function ucms_contrib_favorite_render() {

  $controller = new CartController();
  $controller->setContainer(\Drupal::getContainer());

  return $controller
    ->renderAction(
      \Drupal::requestStack()->getCurrentRequest(),
      \Drupal::currentUser()->id()
    )
  ;
}

/**
 * Implements hook_library().
 */
function ucms_contrib_library() {
  return [
    'ucms_contrib' => [
      'title'   => 'UCMS - Contrib',
      'version' => '0.1',
      'js'      => [
        drupal_get_path('module', 'ucms_contrib') . '/ucms_contrib.js' => [],
      ],
      'css'     => [
        drupal_get_path('module', 'ucms_contrib') . '/ucms_contrib.css' => [
          'type'  => 'file',
          'media' => 'screen',
        ],
      ],
      'dependencies' => [
        ['system', 'ui.draggable'],
        ['system', 'ui.droppable'],
      ],
    ],
    'dragula' => [
      'title'   => 'DragulaJS',
      'version' => '3.7.1+dragscroll',
      'js'      => [
        drupal_get_path('module', 'ucms_contrib') . '/lib/dragula/dragula.min.js' => [],
      ],
      'css'     => [
        drupal_get_path('module', 'ucms_contrib') . '/lib/dragula/dragula.min.css' => [
          'type'  => 'file',
          'media' => 'screen',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * @TODO move to a custom module!
 */
function ucms_contrib_field_attach_view_alter(&$output, $context) {
  $mapping = [
    UCMS_VIEW_MODE_CONTENTADMIN => UCMS_STYLE_CONTENTADMIN,
    UCMS_VIEW_MODE_FAVORITE     => UCMS_STYLE_FAVORITE,
  ];

  // Only work on nodes and some view modes.
  if ($context['entity_type'] != 'node' || !isset($mapping[$context['view_mode']])) {
    return;
  }
  $view_mode = $mapping[$context['view_mode']];

  // Force image style on content viewed in admin mode
  $image_found = FALSE;
  if (in_array($context['view_mode'], array_keys($mapping))) {
    foreach (element_children($output) as $field_name) {
      $element = &$output[$field_name];
      $image_found = _ucms_contrib_find_image_recursive($element, $view_mode);
      if ($image_found) {
        break;
      }
    }
  }

  if (!$image_found) {
    // Add a default image for other medias/content.
    $icon_mapping = [
      // media
      'document'  => 'file',
      'video'     => 'film',
      // Composite content
      'list_type' => 'list',
      'search'    => 'search',
      'geosearch' => 'map-marker',
      // other content
      'form'      => 'list-alt',
      'job_offer' => 'briefcase',
    ];
    $markup = '<div class="ucms-default-icon img-thumbnail"><div><div>';
    if (!empty($icon_mapping[$output['#bundle']])) {
      $markup .= '<span class="glyphicon glyphicon-' . $icon_mapping[$output['#bundle']] . '"></span>';
    }
    else {
      $markup .= '<span>' . node_type_get_name($context['entity']) . '</span>';
    }
    $markup .= '</div></div></div>';
    $output['default_icon'] = [
      '#markup' => $markup,
    ];
  }

  // Add icon relative to meta content type
  $icon_mapping = [
    'content' => 'file',
    'media'   => 'picture',
  ];
  $meta_type = NULL;
  $typeHandler = ucms_contrib_type_handler_get();
  foreach ($typeHandler->getTabs() as $tab => $label) {
    if (in_array($output['#bundle'], $typeHandler->getTabTypes($tab))) {
      $meta_type = $tab;
    }
  }
  $output['metadata']['#prefix'] = '<div class="ucms-metadata">';
  $output['metadata']['#suffix'] = '</div>';
  if (!$context['entity']->status) {
    $output['metadata']['status_icon'] = [
      '#markup' => '<span class="ucms-unpublished-icon glyphicon glyphicon-warning-sign"></span>',
      '#weight' => 5,
    ];
  }
  if ($meta_type && isset($icon_mapping[$meta_type])) {
    $output['metadata']['type_icon'] = [
      '#markup' => '<span class="ucms-type-icon glyphicon glyphicon-' . $icon_mapping[$meta_type] . '"></span>',
      '#weight' => 10,
    ];
  }
}

/**
 * @param $element
 * @param $view_mode
 * @return bool
 */
function _ucms_contrib_find_image_recursive(&$element, $view_mode) {
  $image_found = FALSE;
  if (isset($element['#field_type']) && $element['#field_type'] == 'image' && $element['#formatter'] == 'image') {
    foreach (element_children($element) as $delta) {
      if ($delta === 0) {
        $image_found = TRUE;
        // Force image style related to view mode.
        $element[$delta]['#image_style'] = $view_mode;
        $element[$delta]['#item']['attributes']['class'] = 'img-responsive img-rounded';
      }
      else {
        // Hide other image for slideshows.
        $element[$delta]['#access'] = FALSE;
      }
    }
  }
  elseif (count(element_children($element))) {
    foreach (element_children($element) as $key) {
      $image_found = _ucms_contrib_find_image_recursive($element[$key], $view_mode);
      if ($image_found) {
        $element = $element[$key];
        return TRUE;
      }
    }
  }
  else {
    $element['#access'] = FALSE;
  }
  return $image_found;
}


/**
 * Preprocess theme_ucms_contrib_content_result_grid().
 *
 * @param $vars
 */
function template_preprocess_ucms_contrib_content_result_grid(&$vars) {
  $node_views = node_view_multiple($vars['nodes'], $vars['view_mode']);
  $vars['nodes'] = [];
  foreach(element_children($node_views['nodes']) as $child_key) {
    $vars['nodes'][$child_key] = $node_views['nodes'][$child_key];
  }
}

/**
 * Implements hook_admin_paths().
 */
function ucms_contrib_admin_paths() {
  $paths = [
    'node/*/clone' => TRUE,
  ];
  return $paths;
}

/**
 * Implements hook_element_info_alter().
 */
function ucms_contrib_element_info_alter(&$types) {
  $types['text_format']['#process'][] = 'ucms_contrib_process_text_format';
}

/**
 * Process callback for text_format form elements.
 * @staticvar boolean $done
 * @param [] $element
 * @param [] $form_state
 */
function ucms_contrib_process_text_format($element, &$form_state) {
  static $done = false;

  if (module_exists('ckeditor') && !$done) {
    module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
    $profiles = ckeditor_profile_input_formats();

    foreach ($profiles as $profile_name => $inputs) {
      $profile = ckeditor_profile_load($profile_name);

      if (!isset($profile->settings['loadPlugins'])) {
        continue;
      }

      $profile_plugins = array_keys((array) $profile->settings['loadPlugins']);

      if (in_array('ucmsmediadnd', $profile_plugins)) {
        $typeHandler = ucms_contrib_type_handler_get();
        $settings = ['mediaBundles' => $typeHandler->getMediaTypes()];
        drupal_add_js(['ucms_contrib' => $settings], 'setting');
        break;
      }
    }

    $done = true;
  }

  return $element;
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ucms_contrib_ckeditor_plugin() {
  return [
    'ucmsmediadnd' => [
      'name' => 'ucmsmediadnd',
      'desc' => t("UCMS medias drop & paste management"),
      'path' => drupal_get_path('module', 'ucms_contrib') . '/js/ckeditor/',
    ],
  ];
}

/**
 * Implements hook_ckeditor_settings_alter().
 */
function ucms_contrib_ckeditor_settings_alter(&$settings, $context) {
  $settings['contentsCss'][] = url(drupal_get_path('module', 'ucms_contrib') . '/js/ckeditor/styles.css');
}

/**
 * Implements hook_filter_info().
 */
function ucms_contrib_filter_info() {
  return [
    'ucmsmediadnd' => [
      'title'             => t('UCMS Media DnD'),
      'description'       => t('Will transform UCMS DnD markup into content'),
      'prepare callback'  => 'ucms_contrib_filter_media_prepare',
      'process callback'  => 'ucms_contrib_filter_media_process',
      'default settings'  => [],
    ],
  ];
}

/**
 * Implements callback_filter_prepare().
 */
function ucms_contrib_filter_media_prepare($text, $filter, $format, $langcode) {
  return sf_dic_plugin_create(MediaFilter::class, (array)$filter)->prepare($text, $langcode);
}

/**
 * Implements callback_filter_process().
 */
function ucms_contrib_filter_media_process($text, $filter, $format, $langcode) {
  return sf_dic_plugin_create(MediaFilter::class, (array)$filter)->process($text, $langcode)->getProcessedText();
}

/**
 * Implements hook_entity_load().
 */
function ucms_contrib_entity_load($entities, $type) {

  if (!variable_get('ucms_contrib_clone_aware_features', false)) {
    return;
  }

  // Removes the safe value of all text fields items to force the field API
  // to rebuild it.
  // We have to do that to ensure that our filters are well executed
  // at each display of these fields.
  // Unfortunately, implement hook_filter_info_alter() to disable the cacheable
  // behavior of our filters doesn't work...
  foreach ($entities as $entity) {
    list(,, $bundle) = entity_extract_ids($type, $entity);
    foreach (field_info_instances($type, $bundle) as $name => $info) {
      $field = field_info_field($info['field_name']);
      if (
        in_array($field['type'], ['text', 'text_long', 'text_with_summary'], true) &&
        !empty($entity->{$name}[LANGUAGE_NONE])
      ) {
        foreach ($entity->{$name}[LANGUAGE_NONE] as &$item) {
          unset($item['safe_value']);
        }
      }
    }
  }
}