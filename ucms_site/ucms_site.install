<?php

/**
 * Implements hook_schema().
 */
function ucms_site_schema() {
  $schema = [];

  $schema['ucms_site'] = [
    'description' => 'Site instances',
    'fields' => [
      'id' => [
        'description' => "Site identifier",
        'type'        => 'serial',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'title_admin' => [
        'description' => 'Administrative title',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => true,
        'default'     => '',
      ],
      'title' => [
        'description' => 'Displayed title',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => true,
        'default'     => '',
      ],
      'state' => [
        'description' => "Site workflow state",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
      'type' => [
        'description' => "Site type",
        'type'        => 'varchar',
        'length'      => 64,
        'not null'    => false,
        'default'     => null,
      ],
      'theme' => [
        'description' => "Theme to use",
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => false,
        'default'     => null,
      ],
      'allowed_protocols' => [
        'description' => "1 = HTTP only, 2 = HTTPS only, 3 = both, 0 = let Drupal discover it",
        'type'        => 'int',
        'not null'    => true,
        'default'     => 0,
      ],
      'http_host' => [
        'description' => "Site domain name",
        'type'        => 'varchar',
        'length'      => 1024,
        'not null'    => false,
        'default'     => null,
      ],
      'http_redirects' => [
        'description' => "Site domain other name (HTTP redirections)",
        'type'        => 'text',
      ],
      'replacement_of' => [
        'description' => 'Plain text describing the legacy sites this one replaces',
        'type'        => 'text',
      ],
      'is_public' => [
        'description' => "Is this site public",
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
      'template_id' => [
        'description' => "Template site identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
      ],
      'is_template' => [
        'description' => "Is this site a template site",
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
      'uid' => [
        'description' => "Account owner",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
      'ts_created' => [
        'decription'  => "Creation date",
        'mysql_type'  => 'datetime',
        'pgsql_type'  => 'timestamp',
        'type'        => 'varchar',
        'length'      => 16,
        'not null'    => false,
      ],
      'ts_changed' => [
        'decription'  => "Last updated time (state changed)",
        'mysql_type'  => 'datetime',
        'pgsql_type'  => 'timestamp',
        'type'        => 'varchar',
        'length'      => 16,
        'not null'    => false,
      ],
      'home_nid' => [
        'description' => "Site homepage node identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
        'default'     => 0,
      ],
      'attributes' => [
        'description' => "Arbitrary site attributes, that other modules may use, this module will ignore it",
        'type'        => 'text',
        'not null'    => false,
        'default'     => null,
      ],
    ],
    'foreign keys' => [
      'uid' => [
        'table'   => 'users',
        'columns' => ['uid' => 'uid'],
      ],
      'home_nid' => [
        'table'   => 'node',
        'columns' => ['home_nid' => 'nid'],
      ],
      'template_id' => [
        'table'   => 'ucms_site',
        'columns' => ['template_id' => 'id'],
      ],
    ],
    'primary key' => ['id'],
  ];

  $schema['ucms_site_access'] = [
    'description' => 'Sites webmasters',
    'fields' => [
      'site_id' => [
        'description' => "Site identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'uid' => [
        'description' => "Webmaster",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'role' => [
        'description' => "Role in site, 1 = webmaster, 2 = contrib",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 1,
      ],
    ],
    'foreign keys' => [
      'site_id' => [
        'table'   => 'ucms_site',
        'columns' => ['site_id' => 'id'],
      ],
      'uid' => [
        'table'   => 'users',
        'columns' => ['uid' => 'uid'],
      ],
    ],
    'primary key' => ['site_id', 'uid'],
  ];

  $schema['ucms_site_node'] = [
    'description' => 'Sites nodes',
    'fields' => [
      'site_id' => [
        'description' => "Site identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'nid' => [
        'description' => "Node identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
    ],
    'foreign keys' => [
      'site_id' => [
        'table'   => 'ucms_site',
        'columns' => ['site_id' => 'id'],
      ],
      'nid' => [
        'table'   => 'node',
        'columns' => ['nid' => 'nid'],
      ],
    ],
    'primary key' => ['site_id', 'nid'],
  ];

  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function ucms_site_schema_alter(&$schema) {

  if (isset($schema['umenu'])) {
    $schema['umenu']['fields']['site_id'] = [
      'description' => "Site identifier",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
    ];
    $schema['umenu']['foreign keys']['site_id'] = [
      'table'   => 'ucms_site',
      'columns' => ['site_id' => 'id'],
    ];
  }

  if (isset($schema['taxonomy_term_data'])) {
    $schema['taxonomy_term_data']['fields']['is_locked'] = [
      'description' => "Is this term locked for modification and so the nodes are",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ];
    $schema['taxonomy_term_data']['fields']['user_id'] = [
      'description' => "User which created the term",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ];
    $schema['taxonomy_term_data']['foreign keys']['user_id'] = [
      'table'   => 'users',
      'columns' => ['user_id' => 'uid'],
      'delete'  => 'set null',
    ];
  }

  if (isset($schema['url_alias'])) {
    $schema['url_alias']['fields']['is_canonical'] = [
      'description' => "Is this alias the canonical alias for the source path",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ];
    $schema['url_alias']['fields']['site_id'] = [
      'description' => "Site identifier the alias lies on",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ];
  }

  if (isset($schema['node'])) {
    $schema['node']['fields']['is_global'] = [
      'description' => "Does this node belongs to the global base",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 1,
    ];
    $schema['node']['fields']['is_group'] = [
      'description' => "Does this node belongs to the group base",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ];
    $schema['node']['fields']['is_flagged'] = [
      'description' => "Is this node marked as innapropriate",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ];
    $schema['node']['fields']['is_starred'] = [
      'description' => "Is this content starred",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ];
    $schema['node']['fields']['is_clonable'] = [
      'description' => "Is this node clonable",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 1,
    ];
    $schema['node']['fields']['origin_nid'] = [
      'description' => "Original parent of all parents this node was cloned with",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ];
    $schema['node']['fields']['parent_nid'] = [
      'description' => "Node from which this node was cloned with",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ];
    $schema['node']['fields']['site_id'] = [
      'description' => "Original site identifier this node was created into",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ];
  }
}

/**
 * Adds missing database table columns and constraints
 */
function ucms_site_install_schema_fix() {

  // Adds {node}.is_global column.
  if (db_table_exists('node') && !db_field_exists('node', 'is_global')) {
    db_add_field('node', 'is_global', [
      'description' => "Does this node belongs to the global base",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 1,
    ]);
  }
  // Adds {node}.is_group column.
  if (db_table_exists('node') && !db_field_exists('node', 'is_group')) {
    db_add_field('node', 'is_group', [
      'description' => "Does this node belongs to the group base",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  // Adds {node}.is_flagged column.
  if (db_table_exists('node') && !db_field_exists('node', 'is_flagged')) {
    db_add_field('node', 'is_flagged', [
      'description' => "Is this node marked as innapropriate",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  // Adds {node}.is_starred column.
  if (db_table_exists('node') && !db_field_exists('node', 'is_starred')) {
    db_add_field('node', 'is_starred', [
      'description' => "Is this content starred",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  // Adds {node}.is_clonable column.
  if (db_table_exists('node') && !db_field_exists('node', 'is_clonable')) {
    db_add_field('node', 'is_clonable', [
      'description' => "Is this node clonable",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 1,
    ]);
  }
  // Adds {node}.is_clonable column.
  if (db_table_exists('node') && !db_field_exists('node', 'site_id')) {
    db_add_field('node', 'site_id', [
      'description' => "Original site identifier this node was created into",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ]);
  }
  // Adds {node}.parent_nid column.
  if (db_table_exists('node') && !db_field_exists('node', 'origin_nid')) {
    db_add_field('node', 'origin_nid', [
      'description' => "Original parent of all parents this node was cloned with",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ]);
  }
  // Adds {node}.parent_nid column.
  if (db_table_exists('node') && !db_field_exists('node', 'parent_nid')) {
    db_add_field('node', 'parent_nid', [
      'description' => "Node from which this node was cloned with",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ]);
  }

  // Adds {taxonomy_term_data}.is_locked column.
  if (db_table_exists('taxonomy_term_data') && !db_field_exists('taxonomy_term_data', 'is_locked')) {
    db_add_field('taxonomy_term_data', 'is_locked', [
      'description' => "Is this term locked for modification and so the nodes are",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  // Adds {taxonomy_term_data}.user_id column.
  if (db_table_exists('taxonomy_term_data') && !db_field_exists('taxonomy_term_data', 'user_id')) {
    db_add_field('taxonomy_term_data', 'user_id', [
      'description' => "User which created the term",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ]);
  }

  // Adds {umenu}.site_id column.
  if (db_table_exists('umenu') && !db_field_exists('umenu', 'site_id')) {
    db_add_field('umenu', 'site_id', [
      'description' => "Site identifier",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ]);
  }
  if (db_table_exists('url_alias') && !db_field_exists('url_alias', 'is_canonical')) {
    db_add_field('url_alias', 'is_canonical', [
      'description' => "Is this alias the canonical alias for the source path",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  if (db_table_exists('url_alias') && !db_field_exists('url_alias', 'site_id')) {
    db_add_field('url_alias', 'site_id', [
      'description' => "Site identifier the alias lies on",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => null,
    ]);
  }

  // Add a few constraints.
  // Hopefully, this syntax should work on both PostgreSQL and MySQL although
  // this is pure coincidence, this is great for us.
  $constraints = [
    'ucms_site_access' => [
      'fk_ucms_site_access_site' => "ALTER TABLE {ucms_site_access} ADD CONSTRAINT {fk_ucms_site_access_site} FOREIGN KEY (site_id) REFERENCES {ucms_site} (id) ON DELETE CASCADE",
      'fk_ucms_site_access_user' => "ALTER TABLE {ucms_site_access} ADD CONSTRAINT {fk_ucms_site_access_user} FOREIGN KEY (uid) REFERENCES {users} (uid) ON DELETE CASCADE",
    ],
    'ucms_site_node' => [
      'fk_ucms_site_node_site' => "ALTER TABLE {ucms_site_node} ADD CONSTRAINT {fk_ucms_site_node_site} FOREIGN KEY (site_id) REFERENCES {ucms_site} (id) ON DELETE CASCADE",
      'fk_ucms_site_node_node' => "ALTER TABLE {ucms_site_node} ADD CONSTRAINT {fk_ucms_site_node_node} FOREIGN KEY (nid) REFERENCES {node} (nid) ON DELETE CASCADE",
    ],
    // Also, add some core ones.
//     'umenu' => [
//       'fk_umenu_site' => "ALTER TABLE {umenu} ADD CONSTRAINT {fk_umenu_site} FOREIGN KEY (site_id) REFERENCES {ucms_site} (id) ON DELETE CASCADE",
//     ],
//     'menu_links' => [
//       'fk_menu_links_menu' => "ALTER TABLE {menu_links} ADD CONSTRAINT {fk_menu_links_menu} FOREIGN KEY (menu_name) REFERENCES {umenu} (name) ON DELETE CASCADE",
//     ],
    'node' => [
      'fk_node_site' => "ALTER TABLE {node} ADD CONSTRAINT {fk_node_site} FOREIGN KEY (site_id) REFERENCES {ucms_site} (id) ON DELETE SET NULL ON UPDATE CASCADE",
      'fk_node_origin' => "ALTER TABLE {node} ADD CONSTRAINT {fk_node_origin} FOREIGN KEY (origin_nid) REFERENCES node (nid) ON DELETE SET NULL ON UPDATE CASCADE",
      'fk_node_parent' => "ALTER TABLE {node} ADD CONSTRAINT {fk_node_parent} FOREIGN KEY (parent_nid) REFERENCES node (nid) ON DELETE SET NULL ON UPDATE CASCADE",
    ],
    'role_permission' => [
      'fk_role_permission' => "ALTER TABLE {role_permission} ADD CONSTRAINT {fk_role_permission} FOREIGN KEY (rid) REFERENCES {role} (rid) ON DELETE CASCADE",
    ],
    'url_alias' => [
      'fk_url_alias_site' => "ALTER TABLE {url_alias} ADD CONSTRAINT {fk_url_alias_site} FOREIGN KEY (site_id) REFERENCES {ucms_site} (id) ON DELETE CASCADE",
    ],
    'users_roles' => [
      'fk_user_role_role' => "ALTER TABLE {users_roles} ADD CONSTRAINT {fk_user_role_role} FOREIGN KEY (rid) REFERENCES {role} (rid) ON DELETE CASCADE",
      'fk_user_role_user' => "ALTER TABLE {users_roles} ADD CONSTRAINT {fk_user_role_user} FOREIGN KEY (uid) REFERENCES {users} (uid) ON DELETE CASCADE",
    ],
    'node_access' => [
      'fk_node' => "ALTER TABLE {node_access} ADD CONSTRAINT {fk_node} FOREIGN KEY (nid) REFERENCES {node} (nid) ON DELETE CASCADE",
    ],
  ];
  foreach ($constraints as $table => $statements) {
    if (db_table_exists($table)) {
      foreach ($statements as $statement) {
        try {
          db_query($statement);
        } catch (\PDOException $e) {
          switch ($e->getCode()) {
            case 42710: // PostgreSQL constraint already exists
              continue;
            case 23000: // MySQL duplicate key in table
              continue;
            default:
              throw $e;
          }
        }
      }
    }
  }

  db_constraint_fix_processed('menu');
  db_constraint_fix_processed('node');
  db_constraint_fix_processed('system');
  db_constraint_fix_processed('taxonomy');
  db_constraint_fix_processed('ucms_site');
  db_constraint_fix_processed('user');
}

/**
 * Adds missing database table columns.
 */
function ucms_site_uninstall_schema_fix() {
  if (db_table_exists('taxonomy_term_data') && db_field_exists('taxonomy_term_data', 'is_locked')) {
    db_drop_field('taxonomy_term_data', 'is_locked');
  }
  if (db_table_exists('umenu') && db_field_exists('umenu', 'site_id')) {
    db_drop_field('umenu', 'site_id');
  }
  if (db_table_exists('node') && db_field_exists('node', 'is_clonable')) {
    db_drop_field('node', 'is_clonable');
  }
  if (db_table_exists('node') && db_field_exists('node', 'is_flagged')) {
    db_drop_field('node', 'is_flagged');
  }
  if (db_table_exists('node') && db_field_exists('node', 'is_global')) {
    db_drop_field('node', 'is_global');
  }
  if (db_table_exists('node') && db_field_exists('node', 'is_group')) {
    db_drop_field('node', 'is_group');
  }
  if (db_table_exists('node') && db_field_exists('node', 'site_id')) {
    db_drop_field('node', 'site_id');
  }
}

/**
 * Implements hook_module_installed().
 */
function ucms_site_module_installed($modules) {
  ucms_site_install_schema_fix();
}

/**
 * Implements hook_install().
 */
function ucms_site_install() {
  ucms_site_install_schema_fix();
}

/**
 * Implements hook_install().
 */
function ucms_site_uninstall() {
  ucms_site_uninstall_schema_fix();
}

/**
 * Adds the {ucms_site_access}.role column.
 */
function ucms_site_update_7005() {
  if (!db_field_exists('ucms_site_access', 'role')) {
    db_add_field('ucms_site_access', 'role', [
      'description' => "Role in site, 1 = webmaster, 2 = contrib",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 1,
    ]);
  }
}

/**
 * Adds the {ucms_site}.http_redirects column.
 */
function ucms_site_update_7006() {
  if (!db_field_exists('ucms_site', 'http_redirects')) {
    db_add_field('ucms_site', 'http_redirects', [
      'description' => "Site domain other name (HTTP redirections)",
      'type'        => 'text',
    ]);
  }
}

/**
 * Adds the {ucms_site}.home_nid column.
 */
function ucms_site_update_7007() {
  if (!db_field_exists('ucms_site', 'home_nid')) {
    db_add_field('ucms_site', 'home_nid', [
      'description' => "Site homepage node identifier",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
}

/**
 * Fixes database constraints.
 */
function ucms_site_update_7009() {
  ucms_site_install_schema_fix();
}

/**
 * Fixes {ucms_site}.home_nid can be NULL.
 */
function ucms_site_update_7010() {
  if (db_field_exists('ucms_site', 'home_nid')) {
    db_change_field('ucms_site', 'home_nid', 'home_nid', [
      'description' => "Site homepage node identifier",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => false,
      'default'     => 0,
    ]);
  }
}

/**
 * For testing sites, set the site requester in the {ucms_site_access} table
 * as rightful webmaster.
 */
function ucms_site_update_7011() {
  db_query("
    INSERT INTO {ucms_site_access} (uid, site_id, role)
    SELECT s.uid, s.id, 1
    FROM {ucms_site} s
    WHERE NOT EXISTS (
      SELECT 1
      FROM {ucms_site_access} a
      WHERE
        a.uid = s.uid
        AND a.site_id = s.id
    )
  ");
}

/**
 * Adds the {node}.is_group column.
 */
function ucms_site_update_7013() {
  if (!db_field_exists('node', 'is_group')) {
    db_add_field('node', 'is_group', [
      'description' => "Does this node belongs to the group base",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
}

/**
 * Removes 'menu' module and add the 'umenu' module instead.
 */
function ucms_site_update_7015() {
  // This is necessary because umenu will set foreign key constraints.
  db_query("DELETE FROM {menu_links}");

  if (module_exists('menu')) {
    module_disable(['menu']);
    drupal_uninstall_modules(['menu'], false);
  }

  if (!module_exists('umenu')) {
    module_enable(['umenu']);
  }

  ucms_site_install_schema_fix();
}

/**
 * Adds the {ucms_site}.attributes column.
 */
function ucms_site_update_7016() {
  if (!db_field_exists('ucms_site', 'attributes')) {
    db_add_field('ucms_site', 'attributes', [
      'description' => "Arbitrary site attributes, that other modules may use, this module will ignore it",
      'type'        => 'text',
      'not null'    => false,
      'default'     => null,
    ]);
  }
}

/**
 * Fixes the NULL types on sites.
 */
function ucms_site_update_7017() {
  db_query("
    UPDATE {ucms_site} s1
    JOIN {ucms_site} s2 ON s2.id = s1.template_id
    SET s1.type = s2.type
    WHERE s1.type IS NULL
  ");
  db_query("
    UPDATE {ucms_site} s1
    SET s1.type = 'ssam'
    WHERE s1.type IS NULL
  ");
}

/**
 * Adds the {ucms_site}.is_public column.
 */
function ucms_site_update_7018() {
  if (!db_field_exists('ucms_site', 'is_public')) {
    db_add_field('ucms_site', 'is_public', [
      'description' => "Is this site public",
      'type'        => 'int',
      'size'        => 'tiny',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
}

/**
 * Fixes schema.
 */
function ucms_site_update_7019() {
  ucms_site_install_schema_fix();
}

/**
 * God mode needs rebuild - Node references between sites needs rebuild.
 */
function ucms_site_update_7021() {
  variable_set('node_access_needs_rebuild', 1);
}

/**
 * Adds the missing {ucms_site}.allowed_protocols column.
 */
function ucms_site_update_7022() {
  if (!db_field_exists('ucms_site', 'allowed_protocols')) {
    db_add_field('ucms_site', 'allowed_protocols', [
      'description' => "1 = HTTP only, 2 = HTTPS only, 3 = both, 0 = let Drupal discover it",
      'type'        => 'int',
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  ucms_site_install_schema_fix();
}

