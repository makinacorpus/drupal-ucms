<?php
/**
 * @file
 * UCMS - Site context and management.
 *
 * @todo
 *   - Implement variables overloading for site: name, home
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use MakinaCorpus\Ucms\Site\Access;
use MakinaCorpus\Ucms\Site\PublicStreamWrapper;
use MakinaCorpus\Ucms\Site\Site;
use MakinaCorpus\Ucms\Site\SiteState;
use MakinaCorpus\Ucms\Site\Controller\AutocompleteController;
use MakinaCorpus\Ucms\Site\Controller\DashboardController;
use MakinaCorpus\Ucms\Site\EventDispatcher\MasterInitEvent;
use MakinaCorpus\Ucms\Site\EventDispatcher\SiteEvents;
use MakinaCorpus\Ucms\Site\EventDispatcher\SiteStatusEvent;
use MakinaCorpus\Ucms\Site\Form\SiteHostnameChange;

/**
 * Implements hook_menu().
 */
function ucms_site_menu() {
  $items = [];

  $items['welcome'] = [
    'title'             => "Welcome",
    'page callback'     => 'ucms_site_webmaster_home',
    'access callback'   => 'ucms_site_menu_access_manage_current',
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site'] = [
    'title'             => "Sites",
    'page callback'     => 'ucms_site_dashboard_site_list_mine',
    'access arguments'  => [Access::PERM_SITE_DASHBOARD_ACCESS],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/all'] = [
    'title'             => "All sites",
    'page callback'     => 'ucms_site_dashboard_site_list_all',
    'access callback'   => 'ucms_site_menu_access_view_all',
    'file'              => 'ucms_site.dashboard.inc',
    'type'              => MENU_LOCAL_TASK,
  ];
  $items['admin/dashboard/site/mine'] = [
    'title'             => "My sites",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/dashboard/site/archive'] = [
    'title'             => "Archives",
    'page callback'     => 'ucms_site_dashboard_site_list_archive',
    'access arguments'  => [Access::PERM_SITE_DASHBOARD_ACCESS],
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 100,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/request'] = [
    'title'             => "Request new site",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteRequest'],
    'access arguments'  => [Access::PERM_SITE_REQUEST],
    'type'              => MENU_NORMAL_ITEM,
  ];

  $items['admin/dashboard/site/%ucms_site'] = [
    'title callback'    => 'ucms_site_menu_item_title',
    'title arguments'   => [3],
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [DashboardController::class . '::viewAction', 3],
    'access callback'   => 'ucms_site_menu_access_overview',
    'access arguments'  => [3],
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/dashboard/site/%ucms_site/view'] = [
    'title'             => "Details",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  if (module_exists('ucms_notification')) {
    $items['admin/dashboard/site/%ucms_site/log'] = [
      'title'             => "Log",
      'page callback'     => 'ucms_site_dashboard_site_page_log',
      'page arguments'    => [3],
      'access callback'   => 'ucms_site_menu_access_overview',
      'access arguments'  => [3],
      'type'              => MENU_LOCAL_TASK,
      'file'              => 'ucms_site.dashboard.inc',
    ];
  }
  $items['admin/dashboard/site/%ucms_site/edit'] = [
    'title'             => "Site edit",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteEdit', 3],
    'access callback'   => 'ucms_site_menu_access_manage',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/delete'] = [
    'title'             => "Site delete",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteDelete', 3],
    'access callback'   => 'ucms_site_menu_access_manage',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/dashboard/site/%ucms_site/change-hostname'] = [
    'title'             => "Change site hostname",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => [SiteHostnameChange::class, 3],
    'access callback'   => 'ucms_site_menu_access_manage',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/switch/%'] = [
    'title'             => "Switch site state",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteSwitch', 3, 5],
    'access callback'   => 'ucms_site_menu_access_switch',
    'access arguments'  => [3, 5],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster'] = [
    'title'             => "Users",
    'page callback'     => 'ucms_site_dashboard_site_page_webmasters',
    'page arguments'    => [3],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['list', 3],
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/add-existing'] = [
    'title'             => "Add an existing user",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterAddExisting', 3],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['add-existing', 3],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/add-new'] = [
    'title'             => "Create a new webmaster or contributor",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterAddNew', 3],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['add-new', 3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/change-role'] = [
    'title'             => "Change user's role",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterChangeRole', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['change-role', 3, 5],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/promote'] = [
    'title'             => "Promote as webmaster",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterPromote', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['promote', 3, 5],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/demote'] = [
    'title'             => "Demote as contributor",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterDemote', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['demote', 3, 5],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/delete'] = [
    'title'             => "Delete the user from this site",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterDelete', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => ['delete', 3, 5],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/ajax/users-ac'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [AutocompleteController::class . '::userAutocompleteAction'],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/ajax/sites-ac'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [AutocompleteController::class . '::siteAutocompleteAction'],
    'type'              => MENU_CALLBACK,
  ];

  $items['node/%node/reference'] = [
    'title'             => "Reference this content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\NodeReference', 1],
    'access callback'   => 'ucms_site_menu_access_reference',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/dereference-from/%ucms_site'] = [
    'title'             => "Dereference this content from current site",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\NodeDereferenceFrom', 1, 3],
    'access callback'   => 'ucms_site_menu_access_dereference_from',
    'access arguments'  => [1, 3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['node/%node/set-home'] = [
    'title'             => "Set as home page",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\NodeSetHome', 1],
    'access callback'   => 'ucms_site_menu_access_manage_current',
    'access arguments'  => [],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  $items['node/%node/site-list'] = [
    'title'             => "Sites",
    'page callback'     => 'sf_dic_page',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Controller\NodeInfoController::siteList', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['view', 1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  $items['admin/structure/site'] = [
    'title'             => "Site factory configuration",
    'description'       => "Global site configuration, such as allowed themes for sites",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Admin\SiteManagementForm'],
    'access arguments'  => ['administer site configuration'],
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/structure/site/global'] = [
    'title'             => "Settings",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/structure/site/transitions'] = [
    'title'             => "Transitions",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Admin\SiteStateTransitionForm'],
    'access arguments'  => ['administer site configuration'],
    'type'              => MENU_LOCAL_TASK,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function ucms_site_permission() {
  return [
    Access::PERM_CONTENT_GOD => [
      'title' => t("Content god mode"),
      'description' => t("This permission bypasses everything that can be bypassed, for technical administrators only"),
    ],
    Access::PERM_CONTENT_MANAGE_GLOBAL => [
      'title' => t("Manage global content"),
    ],
    Access::PERM_CONTENT_MANAGE_CORPORATE => [
      'title' => t("Manage group content"),
    ],
    Access::PERM_CONTENT_MANAGE_STARRED => [
      'title' => t("Manage starred content"),
    ],
    Access::PERM_CONTENT_FLAG => [
      'title' => t("Flag content as inappropriate"),
    ],
    Access::PERM_CONTENT_UNFLAG => [
      'title' => t("Unflag content flagged as inappropriate"),
    ],
    Access::PERM_CONTENT_TRANSFER_OWNERSHIP => [
      'title' => t("Transfer content ownership to another user"),
    ],
    Access::PERM_CONTENT_VIEW_ALL => [
      'title' => t("View all content no matter where it stands"),
    ],
    Access::PERM_CONTENT_VIEW_GLOBAL => [
      'title' => t("View global published content"),
    ],
    Access::PERM_CONTENT_VIEW_CORPORATE => [
      'title' => t("View group published content"),
    ],
    Access::PERM_CONTENT_VIEW_OTHER => [
      'title' => t("View other site content"),
    ],
    Access::PERM_SITE_MANAGE_HOSTNAME => [
      'title' => t("Site change hostnames"),
      'description' => t("This permission bypasses everything that can be bypassed, for technical administrators only"),
    ],
    Access::PERM_SITE_GOD => [
      'title' => t("Site god mode"),
      'description' => t("This permission bypasses everything that can be bypassed, for technical administrators only"),
    ],
    Access::PERM_SITE_REQUEST => [
      'title' => t("Request new site"),
    ],
    Access::PERM_SITE_DASHBOARD_ACCESS => [
      'title' => t("Access to site dashboard"),
    ],
    Access::PERM_SITE_MANAGE_ALL => [
      'title' => t("Manage all sites no matter their state is"),
    ],
    Access::PERM_SITE_VIEW_ALL => [
      'title' => t("View all sites no matter their state is"),
    ],
    Access::PERM_GROUP_DASHBOARD_ACCESS => [
      'title' => t("Access to group dashboard"),
    ],
    Access::PERM_GROUP_MANAGE_ALL => [
      'title' => t("Manage all groups"),
    ],
    Access::PERM_GROUP_MANAGE_ORPHAN => [
      'title' => t("Manage orphan content"),
    ],
    Access::PERM_USER_MANAGE_ALL => [
      'title' => t("Manage all users"),
    ],
    Access::PERM_USER_VIEW_ALL => [
      'title' => t("View all users"),
    ],
  ];
}

/**
 * Is the given path allowed on sites.
 *
 * @param string $path
 *
 * @return $path
 */
function ucms_site_admin_path_is_allowed($path) {

  // Proceed to node path check first: most URL will always be node URL
  // we must shortcut them as quicly as possible to gain a few CPU cycles
  // from there.
  $arg = explode('/', $path);
  if ($arg[0] === 'node') {
    // Whitelist our custom node URLs.
    if (is_numeric($arg[1])) {
      if (isset($arg[2])) {
        switch ($arg[2]) {
          case 'duplicate':
          case 'clone':
          case 'edit':
          case 'gallery':
          case 'seo-edit':
            return true;
        }
      }
      // All nodes display should always be allowed.
      return true;
    }
  }

  // Our proper logic is following.
  if ('system/ajax' === $path) {
    return true;
  }
  if (minidialog_is_ajax()) {
    return true;
  }

  // Give a chance to contrib modules to override this.
  $ret = module_invoke_all('ucms_path_is_allowed', $path);
  if (in_array(false, $ret, true)) {
    return false;
  } else if (in_array(true, $ret, true)) {
    return true;
  }

  if (path_is_admin($path)) {
    // Allow node/add
    if ('node/add' === substr($path, 0, 8)) {
      return true;
    }
    if ('admin/action/process' === substr($path, 0, 20)) {
      return true;
    }
    if ('admin/dashboard/tree' === substr($path, 0, 20)) {
      return true;
    }
    if ('admin/dashboard/content' === substr($path, 0, 23)) {
      return true;
    }
    if ('admin/dashboard/media' === substr($path, 0, 21)) {
      return true;
    }
    if ('admin/cart/refresh' === substr($path, 0, 18)) {
      return true;
    }
    if ('admin/cart' === substr($path, 0, 10)) {
      return true;
    }
    return false;
  }

  return true;
}

/**
 * Implements hook_url_outbound_alter().
 */
function ucms_site_url_outbound_alter(&$path, &$options, $original_path) {

  if (empty($original_path)) {
    return;
  }

  // Skip external URLs, we cannot proceed them on both fronts, since other
  // sites in the platform will actually be dealt as external by Drupal core
  // let them pass, if you need to generate other site's URLs, please use
  // the 'ucms_site.url_generator' service manually or the 'ucms_site_url'
  // twig function.
  if ($options['external']) {
    return;
  }

  // Avoid reentrancy, especially if the URL was generated using the site
  // manager, case in which we don't need to process it.
  if (isset($options['ucms_processed'])) {
    return;
  }

  $options['ucms_processed'] = true;
  $options['ucms_site'] = false;
  $manager = ucms_site_manager();

  if ($manager->hasContext()) {
    // Enforce master-only (administration pages) links to be absolute with the
    // master hostname instead of being directed to the current site.
    if ($path && !ucms_site_admin_path_is_allowed($path)) {
      $options['absolute'] = true;
      $options['external'] = true;
      $path = ucms_site_master_absolute_url() . '/' . $path;
    } else {
      $options['ucms_site'] = $manager->getContext()->getId();
    }
  } else {
    if (drupal_is_cli() && $_SERVER['REQUEST_METHOD'] !== 'POST') {
      return;
    }
    // In case we have no site context, and we are actually trying to render a
    // node link, we must enforce a local site to display it when relevant,
    // especially that most nodes can't be seen on master.
    $matches = [];
    if (preg_match('#^node/(\d+)(|/view)$#', $original_path, $matches)) {
      // Please note that the following algorith will probably be very heavy
      // in term of performances, but it can only happens in the administration
      // pages, in which nodes will almost always be preloaded one prior to
      // generating links to it.
      $node = node_load($matches[1]);
      if ($node) {
        /** @var \MakinaCorpus\Ucms\Site\NodeAccessService $nodeAccessService */
        $nodeAccessService = \Drupal::service('ucms_site.node_access_helper');
        // findMostRelevantSiteFor() allows fetching URL for non enabled sites, but
        // will always find a site the current user can see. This function will
        // always be called when attempting to connect on the admin sites, so this
        // fine to redirect on non enabled sites if no enabled site was found.
        $mostRelevantSite = $nodeAccessService->findMostRelevantSiteFor($node);
        if ($mostRelevantSite) {
          $manager->getUrlGenerator()->forceSiteUrl($options, $mostRelevantSite);
          $options['ucms_site'] = $mostRelevantSite;
        }
      }
    }
  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function ucms_site_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (ucms_site_is_master()) {
    $matches = [];
    if (module_exists('ucms_sso') && preg_match('@^node/(\d+)(|/(view|edit))?$@', $path, $matches)) {
      $node = \Drupal::service('entity.manager')->getStorage('node')->load($matches[1]);
      if (!empty($node->site_id)) {
        $options['query'] = ['destination' => $path];
        $path = 'sso/goto/' . $node->site_id;
      }
    }
  }
}

/**
 * Title callback for menu items.
 *
 * @param Site $site
 */
function ucms_site_menu_item_title(Site $site) {
  return $site->title_admin;
}

/**
 * Implements hook_theme().
 */
function ucms_site_theme() {
  return [
    'ucms_site_state_transition_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Get site manager service.
 *
 * @return \MakinaCorpus\Ucms\Site\SiteManager
 */
function ucms_site_manager() {
  return \Drupal::service('ucms_site.manager');
}

/**
 * Get node access helper.
 *
 * @return \MakinaCorpus\Ucms\Site\NodeAccessService
 */
function ucms_site_node_access_helper() {
  return \Drupal::service('ucms_site.node_access_helper');
}

/**
 * Menu helper.
 */
function ucms_site_load($id) {
  try {
    return ucms_site_manager()->getStorage()->findOne($id);
  } catch (\InvalidArgumentException $e) {
    return false;
  }
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_view_all($account = null) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return
    $account->hasPermission(Access::PERM_SITE_MANAGE_ALL) ||
    $account->hasPermission(Access::PERM_SITE_VIEW_ALL) ||
    $account->hasPermission(Access::PERM_SITE_GOD)
  ;
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_view($site, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanView($account, $site);
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_overview($site, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanOverview($account, $site);
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_manage_current($account = null) {
  $manager = ucms_site_manager();
  if (!$manager->hasContext()) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return $manager->getAccess()->userCanManage($account, $manager->getContext());
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_manage($site, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanManage($account, $site);
}

/**
 * Menu access check helper.
 */
function ucms_site_menu_access_switch($site, $state, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanSwitch($account, $site, $state);
}

/**
 * Menu access check helper.
 *
 * @param string $op The operation the user wanna perform
 * @param Site $site
 * @param AccountInterface $webmaster
 * @param AccountInterface $account
 *
 * @return boolean
 */
function ucms_site_menu_access_webmasters($op, Site $site, AccountInterface $webmaster = null, AccountInterface $account = null) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }

  $manager = ucms_site_manager();

  if ($manager->getAccess()->userCanManageWebmasters($account, $site)) {
    switch ($op) {
      case 'change-role':
        // Prevents to give a role to a user which doesn't belong to the site
        if (!$manager->getAccess()->userHasRole($webmaster, $site)) {
          return false;
        }
        break;

      case 'promote':
        // Prevents to promote a user which is not a contributor of the site
        if (!$manager->getAccess()->userIsContributor($webmaster, $site)) {
          return false;
        }
        break;

      case 'demote':
        // Prevents to demote a user which is not a webmaster of the site
        if (!$manager->getAccess()->userIsWebmaster($webmaster, $site)) {
          return false;
        }
        break;
    }

    return true;
  }

  return false;
}

/**
 * Menu access check helper.
 */
function ucms_site_menu_access_reference(NodeInterface $node, $account = null) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return $node->access('view', $account) && ucms_site_node_access_helper()->userCanReference($account, $node);
}

/**
 * Menu access check helper.
 */
function ucms_site_menu_access_dereference_from(NodeInterface $node, $site = null, $account = null) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  $manager = ucms_site_manager();
  if (!$site) {
    if (!$manager->hasContext()) {
      return false;
    }
    $site = $manager->getContext();
  }
  return ucms_site_node_access_helper()->userCanDereference($account, $node, $site);
}

/**
 * Mostly copy-pasted code from drupal_fast_404(), use it wisely
 */
function ucms_site_fast_404() {
  drupal_add_http_header('Status', '404 Not Found');
  $fast_404_html = variable_get('404_fast_html', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>');
  // Replace @path in the variable with the page path.
  print strtr($fast_404_html, array('@path' => check_plain(request_uri())));
  exit;
}

/**
 * Implements hook_boot().
 */
function ucms_site_boot() {

  // Yes, this should also happen in Drush environment.
  if (!function_exists('drupal_path_initialize')) {
    $GLOBALS['conf']['path_inc'] = substr(__DIR__, strlen(realpath(DRUPAL_ROOT))) . '/../ucms_seo/includes/path.inc';
  }

  if (drupal_is_cli()) {
    return; // Make drush happy.
  }

  // hook_boot() is the perfect place to set any context long before anything
  // else get initialized (except locale).
  $manager = ucms_site_manager();
  $request = \Drupal::request();
  $hostname = $request->server->get('HTTP_HOST');

  if ($hostname) {
    if ($site = $manager->getStorage()->findByHostname($hostname)) {
      // @todo find a better way then disabling the init event
      $manager->setContext($site, $request, true);

      // This has to be done before drupal_path_initialize() which is run right
      // before the hook_init(), so this will be the one and only alteration
      // being done on hook_boot().
      if ($site->hasHome()) {
        $GLOBALS['conf']['site_frontpage'] = 'node/' . $site->home_nid;
      } else {
        // We do need a fallback, else the dashboard module will hit us.
        if ($manager->getAccess()->userIsWebmaster($GLOBALS['user'], $site)) {
          $GLOBALS['conf']['site_frontpage'] = 'welcome';
        } else {
          $GLOBALS['conf']['site_frontpage'] = 'node';
        }
      }

    } else {
      $manager->dropContext();

      if (ucms_site_is_master()) {
        // Trigger the admin init event
        \Drupal::service('event_dispatcher')->dispatch(SiteEvents::EVENT_MASTER_INIT, new MasterInitEvent($request));
      } else if (!ucms_site_is_cdn()) {
        // This will trigger the maintainance page.
        ucms_site_fast_404();
      }
    }
  } else {
    $manager->dropContext();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ucms_site_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {

    case 'menu_site_status_alter':
      unset($implementations['user']);
      break;

    case 'url_outbound_alter':
      // Always be the last, so that we can safely rewrite the URL
      $group = $implementations['ucms_site'];
      unset($implementations['ucms_site']);
      $implementations['ucms_site'] = $group;
      // And just set the SEO module after us, he will use our information
      $group = $implementations['ucms_seo'];
      unset($implementations['ucms_seo']);
      $implementations['ucms_seo'] = $group;
      break;
  }
}

/**
 * Implements hook_menu_site_status_alter().
 */
function ucms_site_menu_site_status_alter(&$menu_site_status, $path) {

  if (drupal_is_cli()) {
    return; // Make drush happy.
  }
  if (!ucms_site_manager()->hasContext()) {
    return; // Do not alter proper behavior on master.
  }

  // Allow SSO login when site is down.
  if ('sso/login' === current_path()) {
    $menu_site_status = MENU_SITE_ONLINE;
    return;
  }

  // Do not alter an already offline site.
  if (MENU_SITE_OFFLINE === $menu_site_status) {
    return;
  }

  $site = ucms_site_manager()->getContext();

  if (!$site) {
    return; // No site in context, nothing to check for.
  }

  if (SiteState::ON != $site->state && !ucms_site_manager()->getAccess()->userCanView(\Drupal::currentUser(), $site)) {
    $menu_site_status = MENU_SITE_OFFLINE;
    // State off means that the site is valid and up, but in maintainance mode,
    // case in which we should just set the maintainance mode and leave,
    // otherwise would mean that the site is neither ON nor OFF and does not
    // exist for the outside, so redirect to something that exists (the main
    // site). If we have nothing to redirect to, at least this code will
    // fallback on site being offline.
    if (SiteState::OFF != $site->state) {
      ucms_site_redirect_to_default();
    }
  }

  // Trigger an event allowing status alteration, only if the site is currently online.
  if (MENU_SITE_ONLINE === $menu_site_status) {
    $event = new SiteStatusEvent($site, $menu_site_status, $path);
    \Drupal::service('event_dispatcher')->dispatch(SiteStatusEvent::EVENT_NAME, $event);
    $menu_site_status = $event->getStatus();
  }
}

/**
 * Implements hook_stream_wrappers_alter().
 * For CDN static domain replacement on public:// stream wrapper
 */
function ucms_site_stream_wrappers_alter(&$wrappers) {
  // Connect our override of the public:// stream wrapper for
  // static file CDN redirection (if any)
  $wrappers['public']['class'] = PublicStreamWrapper::class;
}

/**
 * Implements hook_file_url_alter
 * For CDN static domain replacement on all file related urls
 */
function ucms_site_file_url_alter(&$original_uri) {
  $scheme = file_uri_scheme($original_uri);

  $use_cdn_here = variable_get('ucms_site_use_cdn', False);

  // local CDN Not activated?
  if (!$use_cdn_here) {
 //   return;
  }

  $cdn = variable_get('ucms_site_cdn_uri', $GLOBALS['base_url']);

  // If the current URI is an absolute or protocol-relative URI, return
  // immediately.
  // it may be an already altered public:// url
  // we do not also alter the favicon sitemap or robots files which should be
  // managed by all real domain-related sites
  if (($scheme && ($scheme === 'http' || $scheme === 'https'))
      || (drupal_substr($original_uri, 0, 2) == '//')
      || (in_array(drupal_substr($original_uri, -11), array('favicon.ico', 'sitemap.xml')))
      || (drupal_substr($original_uri, -10) == 'robots.txt')
  ) {
    return;
  }
  else if ($scheme) {

    // Explicitly exclude the local private:// stream wrapper.
    // as we do not want it managed like public files
    // And also remove the public:// stream wrapper as it is managed by
    // ucms_site_stream_wrappers_alter
    if ($scheme === 'private' || $scheme === 'public') {
      return;
    }

    // We work only on file delivered locally (not rewriting imgur things, for example)
    $local_schemes = array_keys(file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL));
    if (!in_array($scheme, $local_schemes)) {
      return;
    }

    // Attempt to get an external URL using the appropriate wrapper.
    if ($wrapper = file_stream_wrapper_get_instance_by_uri($original_uri)) {
      $original_uri = str_replace($GLOBALS['base_url'] . '/', $cdn, $wrapper->getExternalUrl());
    } else {
      return;
    }
  } else {
    // classical file paths like '/foo/css/toto.css'
    $original_uri = $cdn . '/' . $original_uri;
  }
}

/**
 * Is current site master.
 *
 * @return boolean
 */
function ucms_site_is_master() {
  return variable_get('ucms_site_master_hostname') === $_SERVER['HTTP_HOST'];
}

/**
 * Is current site CDN.
 *
 * @return boolean
 */
function ucms_site_is_cdn() {
  return $_SERVER['HTTP_HOST'] === variable_get('ucms_site_cdn_domain');
}

/**
 * Get master absolute URL
 *
 * @return string
 */
function ucms_site_master_absolute_url() {
  return ($GLOBALS['is_https'] ? 'https' : 'http') . '://' . variable_get('ucms_site_master_hostname');
}

/**
 * Redirect to mater
 */
function ucms_site_redirect_to_master() {
  $path = 'admin/dashboard';
  if (path_is_admin(current_path())) {
    $path = current_path();
  }
  drupal_goto(ucms_site_master_absolute_url() . '/' . $path);
}

/**
 * Redirect to mater
 */
function ucms_site_redirect_to_default() {
  if ($uri = variable_get('ucms_site.redirect.uri')) {
    drupal_goto($uri, [], variable_get('ucms_site.redirect.http_code', 307));
  }
}

/**
 * Redirect on node view if node can be viewed elsewhere than master.
 */
function ucms_site_init_node_redirect() {
  if (user_is_anonymous()) { // Better be safe than sorry.
    return;
  }
  if (!ucms_site_is_master()) { // Non-applicable.
    return;
  }
  // Pure optimisation, and find node view page at the same time.
  if ('node' !== arg(0) || !is_numeric(arg(1)) || arg(2)) {
    return;
  }
  if ($node = menu_get_object()) {
    // findMostRelevantSiteFor() allows fetching URL for non enabled sites, but
    // will always find a site the current user can see. This function will
    // always be called when attempting to connect on the admin sites, so this
    // fine to redirect on non enabled sites if no enabled site was found.
    $siteId = ucms_site_node_access_helper()->findMostRelevantSiteFor($node);
    if ($siteId) {
      drupal_goto('sso/goto/' . $siteId, ['query' => ['destination' => current_path()]]);
    }
  }
}

/**
 * Implements hook_init().
 */
function ucms_site_init() {

  if (drupal_is_cli()) {
    return; // Make drush happy.
  }

  $manager = ucms_site_manager();

  // We might have some problems due to the fact that the site is determined
  // at hook_boot() time, for example, we cannot call the path_is_admin()
  // function because modules have not been invoked. Site is being set way
  // before at hook_boot() in order to ensure that everything actually using
  // this information until now does it right (they should only be revelant
  // for frontend anyway), but we have a chance right now to fix admin paths
  // and remove the site information right now.
  if ($manager->hasContext()) {
    // We avoid redirections on dashboard in case of POST requests
    // to allow layout management requests (AJAX)
    if (!ucms_site_admin_path_is_allowed(current_path())) {
      if (user_is_logged_in()) {
        // Logged-in users should not 403 on sites, but go to dashboard instead.
        ucms_site_redirect_to_master();
      }
    } else {

      // Normal runtime, there is a context, and path is not admin.
      $site = $manager->getContext();

      if ($site->title) {
        $GLOBALS['conf']['site_name'] = $site->title;
      }

      $manager->dispatchPostInit();
    }
  } else if (user_is_logged_in() && !ucms_site_is_master()) {
    ucms_site_redirect_to_master(); // Site does not exists.
  }

  ucms_site_init_node_redirect();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ucms_site_form_user_login_alter(&$form, &$form_state) {
  // Username is still a unique value but it's preferable to invite users
  // to connect with its e-mail.
  $form['name']['#title_force'] = true;
  $form['name']['#title'] = t("Your e-mail address");
  $form['name']['#description'] = t('Enter your @s e-mail address.', array('@s' => variable_get('site_name', 'Drupal')));
  $form['password']['#description'] = t('Enter the password that accompanies your e-mail address.');
}

/**
 * Implements hook_custom_theme().
 */
function ucms_site_custom_theme() {

  if (path_is_admin(current_path())) {
    // Because there is actually a few admin paths that are accessible from
    // the sites themselves (node add, edit and menu tree) we can't override
    // the theme when we are working in an admin path.
    return;
  }

  // This should be called way after the hook_init() run, so we are sure the
  // site has been rightly set, and if we are in admin site has been removed,
  // so if we have a site structure, we are 100% sure we are not in an admin
  // path.
  $manager = ucms_site_manager();
  $site = $manager->getContext();

  if (!$site) {
    return;
  }

  $manager->dispatchPostInit();

  if (!$site->theme) {
    return;
  }

  // Ensure the theme is enabled for security, Drupal won't do it for
  // you, you might experience surprises. There is sadly no shortcut
  // we have to iterate over the full list of themes.
  foreach (list_themes() as $name => $data) {
    if ($site->theme === $name && $data->status) {
      return $site->theme;
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * This is required in order for users that may bypass node access (UID 1 is
 * one of them) to have site content correctly isolated depending on context.
 */
function ucms_site_query_node_access_alter(QueryAlterableInterface $query) {

  $site = ucms_site_manager()->getContext();

  if (!$site) {
    return;
  }
  if (!$query instanceof SelectQueryInterface) {
    return;
  }
  if ($query->hasTag(Access::QUERY_TAG_CONTEXT_OPT_OUT)) {
    return;
  }

  /* @var $account AccountInterface */
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }


  // If no base table is specified explicitly, search for one.
  $nodeAlias = null;
  foreach ($query->getTables() as $alias => $table_info) {
    if (!($table_info instanceof SelectQueryInterface)) {
      // If the node table is in the query, it wins immediately.
      if ('node' === $table_info['table']) {
        $nodeAlias = $alias;
      }
    }
  }
  if (!$nodeAlias) {
    return;
  }

  // Where the magic happens.
  $query->join(
    'ucms_site_node',
    'access_sn',
    "access_sn.nid = " . $nodeAlias . ".nid AND access_sn.site_id = :access_sn_site_id",
    [':access_sn_site_id' => $site->getId()]
  );
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Implement site visibility access control for the admin UI, this is the only
 * query alteration for business purpose this module will ever do.
 */
function ucms_site_query_ucms_site_access_alter(QueryAlterableInterface $query) {

  if (!$query instanceof SelectQueryInterface) {
    return;
  }
  if (drupal_is_cli()) {
    // In theory, we should not have to do this, but it happens that during
    // drush upgrade, which runs all update functions altogether one by one,
    // it may happen that this module gets enable during the same run, and
    // that the 'sf_dic' container, even if correctly rebuilt, may not be
    // used because older object references are being used by the code (old
    // services still referenced into some other being in use).
    return;
  }

  /* @var $account AccountInterface */
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  if ($account->hasPermission(Access::PERM_SITE_GOD) ||
      $account->hasPermission(Access::PERM_SITE_MANAGE_ALL) ||
      $account->hasPermission(Access::PERM_SITE_VIEW_ALL)
  ) {
    return;
  }

  /** @var \MakinaCorpus\Ucms\Site\GroupManager $groupManager */
  $groupManager = \Drupal::service('ucms_group.manager');
  $accessList   = $groupManager->getUserGroups($account);
  $siteAlias    = null;
  $accessAlias  = null;

  // If no base table is specified explicitly, search for one.
  foreach ($query->getTables() as $alias => $table_info) {
    if (!($table_info instanceof SelectQueryInterface)) {
      // If the node table is in the query, it wins immediately.
      if ('ucms_site' === $table_info['table']) {
        $siteAlias = $alias;
      }
      if ('ucms_site_access' === $table_info['table']) {
        $accessAlias = $alias;
      }
    }
  }

  if (!$siteAlias && !$accessAlias) {
    return;
  }

  // Apply group conditions, but do not apply anything if the user is not
  // member of any groups: it means that the user is a global administrator.
  if ($accessList) {
    if (!$siteAlias) {
      $siteAlias = $query->join(
        'ucms_site',
        'access_site',
        "access_site.id = " . $accessAlias . ".site_id"
      );
    }
    $groupList = [];
    foreach ($accessList as $access) {
      $groupList[] = $access->getGroupId();
    }
    $query->condition($siteAlias . '.group_id', $groupList);
  }

  // Apply normal user permissions if the current user cannot see all sites
  if (!$account->hasPermission(Access::PERM_SITE_MANAGE_ALL) && !$account->hasPermission(Access::PERM_SITE_VIEW_ALL)) {
    if (!$accessAlias) {
      $query->join(
        'ucms_site_access',
        'access_sa',
        "access_sa.site_id = " . $siteAlias . ".id AND access_sa.uid = :access_sa_uid",
        [':access_sa_uid' => $account->id()]
      );
    } else {
      $query->condition($accessAlias . '.uid', $account->id());
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Implement site visibility access control for the admin UI, this is the only
 * query alteration for business purpose this module will ever do.
 */
function ucms_site_query_ucms_user_access_alter(QueryAlterableInterface $query) {

  if (!$query instanceof SelectQueryInterface) {
    return;
  }
  if (drupal_is_cli()) {
    // In theory, we should not have to do this, but it happens that during
    // drush upgrade, which runs all update functions altogether one by one,
    // it may happen that this module gets enable during the same run, and
    // that the 'sf_dic' container, even if correctly rebuilt, may not be
    // used because older object references are being used by the code (old
    // services still referenced into some other being in use).
    return;
  }

  /* @var $account AccountInterface */
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  if ($account->hasPermission(Access::PERM_USER_MANAGE_ALL) || $account->hasPermission(Access::PERM_USER_VIEW_ALL)) {
    return;
  }

  $userAlias = null;
  $userGroupAlias = null;

  // If no base table is specified explicitly, search for one.
  foreach ($query->getTables() as $alias => $table_info) {
    if (!($table_info instanceof SelectQueryInterface)) {
      // If the node table is in the query, it wins immediately.
      if ('users' === $table_info['table']) {
        $userAlias = $alias;
      }
      if ('ucms_group_access' === $table_info['table']) {
        $userGroupAlias = $alias;
      }
    }
  }

  if (!$userAlias) {
    return;
  }

  /** @var \MakinaCorpus\Ucms\Site\GroupManager $groupManager */
  $groupManager = \Drupal::service('ucms_group.manager');
  $accessList   = $groupManager->getUserGroups($account);

  // Group admins can view users from their own groups, at least in listings.
  // But more than that, can ONLY see users from their groups.
  if ($accessList) {
    $groupList = [];
    foreach ($accessList as $access) {
      $groupList[] = $access->getGroupId();
    }
    if (!$userGroupAlias) {
      $userGroupAlias = $query->join('ucms_group_access', 'uga', "uga.user_id = " . $userAlias . '.uid');
    }
    $query->condition($userGroupAlias . '.group_id', $groupList);
  } else {
    $query->where("1 = 0"); // You fool.
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function ucms_site_taxonomy_term_presave($term) {
  // Maintain term creators.
  if (empty($term->original) && !empty($GLOBALS['user']->uid)) {
    $term->user_id = $GLOBALS['user']->uid;
  }
}

/**
 * Render the state transition form.
 */
function theme_ucms_site_state_transition_form($variables) {
  $form = $variables['form'];

  $header = [''];
  $rows   = [];
  $map    = SiteState::getList();

  foreach (element_children($form['transitions']) as $k1) {
    $header[] = t($map[$k1]);
    $row = [];
    $row[] = ['data' => $map[$k1], 'header' => true];
    foreach (element_children($form['transitions'][$k1]) as $k2) {
      if ($k1 != $k2) {
        $row[] = drupal_render_children($form['transitions'][$k1][$k2]);
      } else {
        $row[] = ['data' => '<span class="text-muted">' . t("N/A") . '</span>', 'style' => 'text-align: center;'];
      }
    }
    $rows[] = $row;
  }

  return theme('table', ['header' => $header, 'rows' => $rows]) . drupal_render_children($form);
}

/**
 * Home page for webmasters when a site has no frontpage
 */
function ucms_site_webmaster_home() {
  drupal_set_title(t('Welcome to @site-name', array('@site-name' => variable_get('site_name', 'Drupal'))), PASS_THROUGH);

  return sf_dic_twig_render('@ucms_site/views/Site/welcome.html.twig', ['site' => ucms_site_manager()->getContext()]);
}

/**
 * Preprocess dashboard top bar.
 *
 * @param $vars
 */
function ucms_site_preprocess_ucms_dashboard_top(&$vars) {
  $vars['site'] = ucms_site_manager()->getContext();
}

/**
 * Implements hook_image_default_styles()
 */
function ucms_site_image_default_styles() {
  $styles = [];
  $styles['ucms_site_favicon_32x32'] = [
    'label' => 'Favicon 32x32px',
    'effects' => [
      [
        'name' => 'image_scale',
        'data' => [
          'width' => 32,
          'height' => 32,
        ],
        'weight' => 0,
      ],
    ],
    'name' => 'ucms_favicon_32x32',
    'storage' => IMAGE_STORAGE_DEFAULT,
  ];
  $styles['ucms_site_favicon_16x16'] = [
    'label' => 'Favicon 16x16px',
    'effects' => [
      [
        'name' => 'image_scale',
        'data' => [
          'width' => 16,
          'height' => 16,
        ],
        'weight' => 0,
      ],
    ],
    'name' => 'ucms_favicon_16x16',
    'storage' => IMAGE_STORAGE_DEFAULT,
  ];

  return $styles;
}

/**
 * Implements hook_page_build()
 */
function ucms_site_page_build(&$page) {
  $manager = ucms_site_manager();

  if ($manager->hasContext()) {
    $site = $manager->getContext();

    // Handling custom favicon
    if ($favicon = $site->getFavicon()) {
      if ($file = file_load($favicon)) {
        $element = [
          '#tag' => 'link',
          '#attributes' => [
            'href'  => image_style_url('ucms_site_favicon_32x32', $file->uri),
            'rel'   => 'icon',
            'sizes' => "32x32"
          ],
        ];
        drupal_add_html_head($element, 'ucms_site_favicon_32x32');

        $element = [
          '#tag' => 'link',
          '#attributes' => [
            'href'  => image_style_url('ucms_site_favicon_16x16', $file->uri),
            'rel'   => 'icon',
            'sizes' => "16x16"
          ],
        ];
        drupal_add_html_head($element, 'ucms_site_favicon_16x16');
      }
    }
  }
}
